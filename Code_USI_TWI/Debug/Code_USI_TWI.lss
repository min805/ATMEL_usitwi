
Code_USI_TWI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000086c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  0000086c  00000900  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000036  00800078  00800078  00000918  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000918  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000190  00000000  00000000  00000948  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e3f  00000000  00000000  00000ad8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005cc  00000000  00000000  00001917  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000741  00000000  00000000  00001ee3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003f4  00000000  00000000  00002624  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000613  00000000  00000000  00002a18  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000008ca  00000000  00000000  0000302b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000150  00000000  00000000  000038f5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	2a c0       	rjmp	.+84     	; 0x58 <__bad_interrupt>
   4:	29 c0       	rjmp	.+82     	; 0x58 <__bad_interrupt>
   6:	28 c0       	rjmp	.+80     	; 0x58 <__bad_interrupt>
   8:	27 c0       	rjmp	.+78     	; 0x58 <__bad_interrupt>
   a:	26 c0       	rjmp	.+76     	; 0x58 <__bad_interrupt>
   c:	26 c0       	rjmp	.+76     	; 0x5a <__vector_6>
   e:	24 c0       	rjmp	.+72     	; 0x58 <__bad_interrupt>
  10:	23 c0       	rjmp	.+70     	; 0x58 <__bad_interrupt>
  12:	22 c0       	rjmp	.+68     	; 0x58 <__bad_interrupt>
  14:	21 c0       	rjmp	.+66     	; 0x58 <__bad_interrupt>
  16:	a2 c2       	rjmp	.+1348   	; 0x55c <__vector_11>
  18:	1f c0       	rjmp	.+62     	; 0x58 <__bad_interrupt>
  1a:	32 c2       	rjmp	.+1124   	; 0x480 <__vector_13>
  1c:	1d c0       	rjmp	.+58     	; 0x58 <__bad_interrupt>
  1e:	6f c3       	rjmp	.+1758   	; 0x6fe <__vector_15>
  20:	8a c3       	rjmp	.+1812   	; 0x736 <__vector_16>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf e5       	ldi	r28, 0x5F	; 95
  28:	d1 e0       	ldi	r29, 0x01	; 1
  2a:	de bf       	out	0x3e, r29	; 62
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_copy_data>:
  2e:	10 e0       	ldi	r17, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	ec e6       	ldi	r30, 0x6C	; 108
  36:	f8 e0       	ldi	r31, 0x08	; 8
  38:	02 c0       	rjmp	.+4      	; 0x3e <__SP_H__>
  3a:	05 90       	lpm	r0, Z+
  3c:	0d 92       	st	X+, r0
  3e:	a8 37       	cpi	r26, 0x78	; 120
  40:	b1 07       	cpc	r27, r17
  42:	d9 f7       	brne	.-10     	; 0x3a <__do_copy_data+0xc>

00000044 <__do_clear_bss>:
  44:	20 e0       	ldi	r18, 0x00	; 0
  46:	a8 e7       	ldi	r26, 0x78	; 120
  48:	b0 e0       	ldi	r27, 0x00	; 0
  4a:	01 c0       	rjmp	.+2      	; 0x4e <.do_clear_bss_start>

0000004c <.do_clear_bss_loop>:
  4c:	1d 92       	st	X+, r1

0000004e <.do_clear_bss_start>:
  4e:	ae 3a       	cpi	r26, 0xAE	; 174
  50:	b2 07       	cpc	r27, r18
  52:	e1 f7       	brne	.-8      	; 0x4c <.do_clear_bss_loop>
  54:	b1 d1       	rcall	.+866    	; 0x3b8 <main>
  56:	08 c4       	rjmp	.+2064   	; 0x868 <_exit>

00000058 <__bad_interrupt>:
  58:	d3 cf       	rjmp	.-90     	; 0x0 <__vectors>

0000005a <__vector_6>:


/*************************************************
***************************************************/
ISR(TIM1_COMPA_vect)
{
  5a:	1f 92       	push	r1
  5c:	0f 92       	push	r0
  5e:	0f b6       	in	r0, 0x3f	; 63
  60:	0f 92       	push	r0
  62:	11 24       	eor	r1, r1
  64:	8f 93       	push	r24
	wdt_reset();
  66:	a8 95       	wdr
	if(BIT_CHECK(gCountFlag,_BIT_SLOPE_ON)){
  68:	80 91 ad 00 	lds	r24, 0x00AD
  6c:	82 ff       	sbrs	r24, 2
  6e:	08 c0       	rjmp	.+16     	; 0x80 <__vector_6+0x26>
		BIT_CLEAR(gCountFlag,_BIT_SLOPE_ON);
  70:	8b 7f       	andi	r24, 0xFB	; 251
  72:	80 93 ad 00 	sts	0x00AD, r24
		BIT_SET(gWakeUpFlag,_BIT_TIC);
  76:	80 91 ab 00 	lds	r24, 0x00AB
  7a:	81 60       	ori	r24, 0x01	; 1
  7c:	80 93 ab 00 	sts	0x00AB, r24
	}		
	if(++ticCount >= TIC_FOR_1SEC){
  80:	80 91 aa 00 	lds	r24, 0x00AA
  84:	8f 5f       	subi	r24, 0xFF	; 255
  86:	80 93 aa 00 	sts	0x00AA, r24
  8a:	8a 30       	cpi	r24, 0x0A	; 10
  8c:	88 f0       	brcs	.+34     	; 0xb0 <__vector_6+0x56>
		BIT_SET(gWakeUpFlag,_BIT_SEC);
  8e:	80 91 ab 00 	lds	r24, 0x00AB
  92:	82 60       	ori	r24, 0x02	; 2
  94:	80 93 ab 00 	sts	0x00AB, r24
		ticCount = 0;
  98:	10 92 aa 00 	sts	0x00AA, r1
		if(++secCount == 255) secCount = 0;	//secCount = 0~254
  9c:	80 91 ac 00 	lds	r24, 0x00AC
  a0:	8f 5f       	subi	r24, 0xFF	; 255
  a2:	8f 3f       	cpi	r24, 0xFF	; 255
  a4:	19 f0       	breq	.+6      	; 0xac <__vector_6+0x52>
  a6:	80 93 ac 00 	sts	0x00AC, r24
  aa:	02 c0       	rjmp	.+4      	; 0xb0 <__vector_6+0x56>
  ac:	10 92 ac 00 	sts	0x00AC, r1
	}
	//------------------------------
	//PORT_SW = PIN_SW^(1<<_TP);
	//------------------------------
}
  b0:	8f 91       	pop	r24
  b2:	0f 90       	pop	r0
  b4:	0f be       	out	0x3f, r0	; 63
  b6:	0f 90       	pop	r0
  b8:	1f 90       	pop	r1
  ba:	18 95       	reti

000000bc <set_gWakeUpFlag_i2c>:
/*************************************************
callback function for gWakeUpFlag I2C
***************************************************/
void set_gWakeUpFlag_i2c(void)
{
	BIT_SET(gWakeUpFlag,_BIT_I2C);
  bc:	80 91 ab 00 	lds	r24, 0x00AB
  c0:	84 60       	ori	r24, 0x04	; 4
  c2:	80 93 ab 00 	sts	0x00AB, r24
  c6:	08 95       	ret

000000c8 <call_set_nowAMP>:
/*************************************************
callback function for update nowAMP
***************************************************/
void call_set_nowAMP(uint16_t adcValue)
{
	nowAMP = adcValue;
  c8:	90 93 7d 00 	sts	0x007D, r25
  cc:	80 93 7c 00 	sts	0x007C, r24
	//set_gWakeUpFlag_adc();	
	BIT_SET(gWakeUpFlag,_BIT_ADC);
  d0:	80 91 ab 00 	lds	r24, 0x00AB
  d4:	88 60       	ori	r24, 0x08	; 8
  d6:	80 93 ab 00 	sts	0x00AB, r24
  da:	08 95       	ret

000000dc <call_set_TxBuffer>:

/*************************************************
callback function for build txBufffer
***************************************************/
void call_set_TxBuffer(uint8_t amount)
{
  dc:	8f 92       	push	r8
  de:	9f 92       	push	r9
  e0:	bf 92       	push	r11
  e2:	cf 92       	push	r12
  e4:	df 92       	push	r13
  e6:	ef 92       	push	r14
  e8:	ff 92       	push	r15
  ea:	1f 93       	push	r17
  ec:	cf 93       	push	r28
  ee:	df 93       	push	r29
  f0:	c8 2e       	mov	r12, r24
	uint8_t data,i;
	static uint8_t state = STATE_COMMAND;
	static uint8_t command;
	static uint16_t data_h;
	
	cli();
  f2:	f8 94       	cli
	for(i=0; i < amount; i++)
  f4:	88 23       	and	r24, r24
  f6:	09 f4       	brne	.+2      	; 0xfa <call_set_TxBuffer+0x1e>
  f8:	c5 c0       	rjmp	.+394    	; 0x284 <__stack+0x125>
  fa:	d1 2c       	mov	r13, r1
			default:
				state = STATE_COMMAND;
			}
		}else if(state == STATE_DATA_1){
			data_h = (uint16_t)data;
			state = STATE_DATA_2;
  fc:	68 94       	set
  fe:	bb 24       	eor	r11, r11
 100:	b1 f8       	bld	r11, 1
				usiTwi_ByteToTxBuffer(cfg_TimeDelay);
				state = STATE_COMMAND;
			break;
			case GET_NOWAMP:				
				usiTwi_ByteToTxBuffer((uint8_t)((nowAMP>>8)&0x00FF));
				usiTwi_ByteToTxBuffer((uint8_t)(nowAMP&0x00FF));				
 102:	cc e7       	ldi	r28, 0x7C	; 124
 104:	d0 e0       	ldi	r29, 0x00	; 0
	static uint16_t data_h;
	
	cli();
	for(i=0; i < amount; i++)
	{
		data = usiTwi_ByteFromRxBuffer();
 106:	dd d2       	rcall	.+1466   	; 0x6c2 <usiTwi_ByteFromRxBuffer>
 108:	18 2f       	mov	r17, r24
		if(state == STATE_COMMAND){
 10a:	80 91 7b 00 	lds	r24, 0x007B
 10e:	81 11       	cpse	r24, r1
 110:	6e c0       	rjmp	.+220    	; 0x1ee <__stack+0x8f>
			//-------------------------------
			usiTwi_flushTxBuffers();
 112:	a1 d2       	rcall	.+1346   	; 0x656 <usiTwi_flushTxBuffers>
			//-------------------------------
			command = data;
 114:	10 93 7a 00 	sts	0x007A, r17
			switch(command)
 118:	12 30       	cpi	r17, 0x02	; 2
 11a:	09 f4       	brne	.+2      	; 0x11e <call_set_TxBuffer+0x42>
 11c:	4b c0       	rjmp	.+150    	; 0x1b4 <__stack+0x55>
 11e:	28 f4       	brcc	.+10     	; 0x12a <call_set_TxBuffer+0x4e>
 120:	11 23       	and	r17, r17
 122:	61 f0       	breq	.+24     	; 0x13c <call_set_TxBuffer+0x60>
 124:	11 30       	cpi	r17, 0x01	; 1
 126:	f1 f1       	breq	.+124    	; 0x1a4 <__stack+0x45>
 128:	5f c0       	rjmp	.+190    	; 0x1e8 <__stack+0x89>
 12a:	13 30       	cpi	r17, 0x03	; 3
 12c:	09 f4       	brne	.+2      	; 0x130 <call_set_TxBuffer+0x54>
 12e:	50 c0       	rjmp	.+160    	; 0x1d0 <__stack+0x71>
 130:	2f ee       	ldi	r18, 0xEF	; 239
 132:	21 0f       	add	r18, r17
 134:	25 30       	cpi	r18, 0x05	; 5
 136:	08 f4       	brcc	.+2      	; 0x13a <call_set_TxBuffer+0x5e>
 138:	53 c0       	rjmp	.+166    	; 0x1e0 <__stack+0x81>
 13a:	56 c0       	rjmp	.+172    	; 0x1e8 <__stack+0x89>
			{
			case GET_CONFIG:	
				usiTwi_ByteToTxBuffer((uint8_t)((cfg_Bright[nowMODE]>>8)&0x00FF) );	
 13c:	e0 91 7e 00 	lds	r30, 0x007E
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	ee 0f       	add	r30, r30
 144:	ff 1f       	adc	r31, r31
 146:	e1 59       	subi	r30, 0x91	; 145
 148:	ff 4f       	sbci	r31, 0xFF	; 255
 14a:	81 81       	ldd	r24, Z+1	; 0x01
 14c:	a4 d2       	rcall	.+1352   	; 0x696 <usiTwi_ByteToTxBuffer>
				usiTwi_ByteToTxBuffer((uint8_t)(cfg_Bright[nowMODE]&0x00FF) );						
 14e:	e0 91 7e 00 	lds	r30, 0x007E
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	ee 0f       	add	r30, r30
 156:	ff 1f       	adc	r31, r31
 158:	e1 59       	subi	r30, 0x91	; 145
 15a:	ff 4f       	sbci	r31, 0xFF	; 255
 15c:	80 81       	ld	r24, Z
 15e:	9b d2       	rcall	.+1334   	; 0x696 <usiTwi_ByteToTxBuffer>
				usiTwi_ByteToTxBuffer((uint8_t)((cfg_Dimm[nowMODE]>>8)&0x00FF) );
 160:	e0 91 7e 00 	lds	r30, 0x007E
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	ee 0f       	add	r30, r30
 168:	ff 1f       	adc	r31, r31
 16a:	e9 59       	subi	r30, 0x99	; 153
 16c:	ff 4f       	sbci	r31, 0xFF	; 255
 16e:	81 81       	ldd	r24, Z+1	; 0x01
 170:	92 d2       	rcall	.+1316   	; 0x696 <usiTwi_ByteToTxBuffer>
				usiTwi_ByteToTxBuffer((uint8_t)(cfg_Dimm[nowMODE]&0x00FF) );												
 172:	e0 91 7e 00 	lds	r30, 0x007E
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	ee 0f       	add	r30, r30
 17a:	ff 1f       	adc	r31, r31
 17c:	e9 59       	subi	r30, 0x99	; 153
 17e:	ff 4f       	sbci	r31, 0xFF	; 255
 180:	80 81       	ld	r24, Z
 182:	89 d2       	rcall	.+1298   	; 0x696 <usiTwi_ByteToTxBuffer>
				usiTwi_ByteToTxBuffer(cfg_TimeUp[nowMODE]);
 184:	e0 91 7e 00 	lds	r30, 0x007E
 188:	f0 e0       	ldi	r31, 0x00	; 0
 18a:	ed 59       	subi	r30, 0x9D	; 157
 18c:	ff 4f       	sbci	r31, 0xFF	; 255
 18e:	80 81       	ld	r24, Z
 190:	82 d2       	rcall	.+1284   	; 0x696 <usiTwi_ByteToTxBuffer>
				usiTwi_ByteToTxBuffer(cfg_TimeDn);				
 192:	80 91 62 00 	lds	r24, 0x0062
 196:	7f d2       	rcall	.+1278   	; 0x696 <usiTwi_ByteToTxBuffer>
				usiTwi_ByteToTxBuffer(cfg_TimeDelay);
 198:	80 91 61 00 	lds	r24, 0x0061
 19c:	7c d2       	rcall	.+1272   	; 0x696 <usiTwi_ByteToTxBuffer>
				state = STATE_COMMAND;
 19e:	10 92 7b 00 	sts	0x007B, r1
			break;
 1a2:	6d c0       	rjmp	.+218    	; 0x27e <__stack+0x11f>
			case GET_NOWAMP:				
				usiTwi_ByteToTxBuffer((uint8_t)((nowAMP>>8)&0x00FF));
 1a4:	80 91 7d 00 	lds	r24, 0x007D
 1a8:	76 d2       	rcall	.+1260   	; 0x696 <usiTwi_ByteToTxBuffer>
				usiTwi_ByteToTxBuffer((uint8_t)(nowAMP&0x00FF));				
 1aa:	88 81       	ld	r24, Y
 1ac:	74 d2       	rcall	.+1256   	; 0x696 <usiTwi_ByteToTxBuffer>
				state = STATE_COMMAND;
 1ae:	10 92 7b 00 	sts	0x007B, r1
			break;
 1b2:	65 c0       	rjmp	.+202    	; 0x27e <__stack+0x11f>
			case GET_NOWPIR:				
				usiTwi_ByteToTxBuffer(0);
 1b4:	80 e0       	ldi	r24, 0x00	; 0
 1b6:	6f d2       	rcall	.+1246   	; 0x696 <usiTwi_ByteToTxBuffer>
				if(nowPIR != false){
 1b8:	80 91 60 00 	lds	r24, 0x0060
 1bc:	88 23       	and	r24, r24
 1be:	19 f0       	breq	.+6      	; 0x1c6 <__stack+0x67>
					usiTwi_ByteToTxBuffer(0x01);
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	69 d2       	rcall	.+1234   	; 0x696 <usiTwi_ByteToTxBuffer>
 1c4:	02 c0       	rjmp	.+4      	; 0x1ca <__stack+0x6b>
				}else{
					usiTwi_ByteToTxBuffer(0x00);
 1c6:	80 e0       	ldi	r24, 0x00	; 0
 1c8:	66 d2       	rcall	.+1228   	; 0x696 <usiTwi_ByteToTxBuffer>
				}				
				state = STATE_COMMAND;
 1ca:	10 92 7b 00 	sts	0x007B, r1
			break;
 1ce:	57 c0       	rjmp	.+174    	; 0x27e <__stack+0x11f>
			case GET_NOWMOD:				
				usiTwi_ByteToTxBuffer(0);
 1d0:	80 e0       	ldi	r24, 0x00	; 0
 1d2:	61 d2       	rcall	.+1218   	; 0x696 <usiTwi_ByteToTxBuffer>
				usiTwi_ByteToTxBuffer(nowMODE);				
 1d4:	80 91 7e 00 	lds	r24, 0x007E
 1d8:	5e d2       	rcall	.+1212   	; 0x696 <usiTwi_ByteToTxBuffer>
				state = STATE_COMMAND;
 1da:	10 92 7b 00 	sts	0x007B, r1
			break;
 1de:	4f c0       	rjmp	.+158    	; 0x27e <__stack+0x11f>
			case SET_BRIGHT:
			case SET_DIMM:
			case SET_TIMEUP:
			case SET_TIMEDN:
			case SET_DELAY:
				state = STATE_DATA_1;
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	80 93 7b 00 	sts	0x007B, r24
			break;
 1e6:	4b c0       	rjmp	.+150    	; 0x27e <__stack+0x11f>
			default:
				state = STATE_COMMAND;
 1e8:	10 92 7b 00 	sts	0x007B, r1
 1ec:	48 c0       	rjmp	.+144    	; 0x27e <__stack+0x11f>
			}
		}else if(state == STATE_DATA_1){
 1ee:	81 30       	cpi	r24, 0x01	; 1
 1f0:	49 f4       	brne	.+18     	; 0x204 <__stack+0xa5>
			data_h = (uint16_t)data;
 1f2:	21 2f       	mov	r18, r17
 1f4:	30 e0       	ldi	r19, 0x00	; 0
 1f6:	30 93 79 00 	sts	0x0079, r19
 1fa:	20 93 78 00 	sts	0x0078, r18
			state = STATE_DATA_2;
 1fe:	b0 92 7b 00 	sts	0x007B, r11
 202:	3d c0       	rjmp	.+122    	; 0x27e <__stack+0x11f>
			
		}else if(state == STATE_DATA_2){
 204:	82 30       	cpi	r24, 0x02	; 2
 206:	d9 f5       	brne	.+118    	; 0x27e <__stack+0x11f>
			switch(command)
 208:	80 91 7a 00 	lds	r24, 0x007A
 20c:	83 31       	cpi	r24, 0x13	; 19
 20e:	49 f1       	breq	.+82     	; 0x262 <__stack+0x103>
 210:	28 f4       	brcc	.+10     	; 0x21c <__stack+0xbd>
 212:	81 31       	cpi	r24, 0x11	; 17
 214:	41 f0       	breq	.+16     	; 0x226 <__stack+0xc7>
 216:	82 31       	cpi	r24, 0x12	; 18
 218:	a9 f0       	breq	.+42     	; 0x244 <__stack+0xe5>
 21a:	2f c0       	rjmp	.+94     	; 0x27a <__stack+0x11b>
 21c:	84 31       	cpi	r24, 0x14	; 20
 21e:	41 f1       	breq	.+80     	; 0x270 <__stack+0x111>
 220:	85 31       	cpi	r24, 0x15	; 21
 222:	49 f1       	breq	.+82     	; 0x276 <__stack+0x117>
 224:	2a c0       	rjmp	.+84     	; 0x27a <__stack+0x11b>
			{
			case SET_BRIGHT:
				cfg_Bright[nowMODE] = (data_h<<8)&0xff00;
 226:	e0 91 7e 00 	lds	r30, 0x007E
 22a:	f0 e0       	ldi	r31, 0x00	; 0
				cfg_Bright[nowMODE] |= data;
 22c:	ee 0f       	add	r30, r30
 22e:	ff 1f       	adc	r31, r31
 230:	e1 59       	subi	r30, 0x91	; 145
 232:	ff 4f       	sbci	r31, 0xFF	; 255
			
		}else if(state == STATE_DATA_2){
			switch(command)
			{
			case SET_BRIGHT:
				cfg_Bright[nowMODE] = (data_h<<8)&0xff00;
 234:	90 90 78 00 	lds	r9, 0x0078
 238:	81 2c       	mov	r8, r1
				cfg_Bright[nowMODE] |= data;
 23a:	c4 01       	movw	r24, r8
 23c:	81 2b       	or	r24, r17
 23e:	91 83       	std	Z+1, r25	; 0x01
 240:	80 83       	st	Z, r24
			break;
 242:	1b c0       	rjmp	.+54     	; 0x27a <__stack+0x11b>
			case SET_DIMM:				
				cfg_Dimm[nowMODE] = (data_h<<8)&0xff00;
 244:	e0 91 7e 00 	lds	r30, 0x007E
 248:	f0 e0       	ldi	r31, 0x00	; 0
				cfg_Dimm[nowMODE] |= data;
 24a:	ee 0f       	add	r30, r30
 24c:	ff 1f       	adc	r31, r31
 24e:	e9 59       	subi	r30, 0x99	; 153
 250:	ff 4f       	sbci	r31, 0xFF	; 255
			case SET_BRIGHT:
				cfg_Bright[nowMODE] = (data_h<<8)&0xff00;
				cfg_Bright[nowMODE] |= data;
			break;
			case SET_DIMM:				
				cfg_Dimm[nowMODE] = (data_h<<8)&0xff00;
 252:	f0 90 78 00 	lds	r15, 0x0078
 256:	e1 2c       	mov	r14, r1
				cfg_Dimm[nowMODE] |= data;
 258:	c7 01       	movw	r24, r14
 25a:	81 2b       	or	r24, r17
 25c:	91 83       	std	Z+1, r25	; 0x01
 25e:	80 83       	st	Z, r24
			break;
 260:	0c c0       	rjmp	.+24     	; 0x27a <__stack+0x11b>
			case SET_TIMEUP:
				cfg_TimeUp[nowMODE] = data;
 262:	e0 91 7e 00 	lds	r30, 0x007E
 266:	f0 e0       	ldi	r31, 0x00	; 0
 268:	ed 59       	subi	r30, 0x9D	; 157
 26a:	ff 4f       	sbci	r31, 0xFF	; 255
 26c:	10 83       	st	Z, r17
			break;
 26e:	05 c0       	rjmp	.+10     	; 0x27a <__stack+0x11b>
			case SET_TIMEDN:
				cfg_TimeDn = data;
 270:	10 93 62 00 	sts	0x0062, r17
			break;
 274:	02 c0       	rjmp	.+4      	; 0x27a <__stack+0x11b>
			case SET_DELAY:
				cfg_TimeDelay = data;
 276:	10 93 61 00 	sts	0x0061, r17
			break;
			} //end switch
			state = STATE_COMMAND;
 27a:	10 92 7b 00 	sts	0x007B, r1
	static uint8_t state = STATE_COMMAND;
	static uint8_t command;
	static uint16_t data_h;
	
	cli();
	for(i=0; i < amount; i++)
 27e:	d3 94       	inc	r13
 280:	dc 10       	cpse	r13, r12
 282:	41 cf       	rjmp	.-382    	; 0x106 <call_set_TxBuffer+0x2a>
			break;
			} //end switch
			state = STATE_COMMAND;
		} //end if
	} //end for
	sei();	
 284:	78 94       	sei
} //
 286:	df 91       	pop	r29
 288:	cf 91       	pop	r28
 28a:	1f 91       	pop	r17
 28c:	ff 90       	pop	r15
 28e:	ef 90       	pop	r14
 290:	df 90       	pop	r13
 292:	cf 90       	pop	r12
 294:	bf 90       	pop	r11
 296:	9f 90       	pop	r9
 298:	8f 90       	pop	r8
 29a:	08 95       	ret

0000029c <debug_init>:
/*************************************************
	Local method
***************************************************/
void debug_init(void)
{
	PORT_SW &= ~(1<<_TP);	//Pull-up
 29c:	c2 98       	cbi	0x18, 2	; 24
	DDR_SW |= (1<<_TP);		//0=input, 1=output(Save energy)
 29e:	ba 9a       	sbi	0x17, 2	; 23
 2a0:	08 95       	ret

000002a2 <mode_init>:
{
	uint8_t retValue = 0;
	//pull up, input
	//MCUCR &= ~(1<<PUD);
	//Add external full up!!
	PORT_SW |= ~((1<<_SW0)|(1<<_SW1));// tri-state(hi-z)
 2a2:	88 b3       	in	r24, 0x18	; 24
 2a4:	8c 6f       	ori	r24, 0xFC	; 252
 2a6:	88 bb       	out	0x18, r24	; 24
	DDR_SW  &= ~((1<<_SW0)|(1<<_SW1));
 2a8:	87 b3       	in	r24, 0x17	; 23
 2aa:	8c 7f       	andi	r24, 0xFC	; 252
 2ac:	87 bb       	out	0x17, r24	; 23
	
	if(PINB & (1<<_SW0)){ retValue |= 0x01;}
 2ae:	86 b3       	in	r24, 0x16	; 22
 2b0:	81 70       	andi	r24, 0x01	; 1
	if(PINB & (1<<_SW1)){ retValue |= 0x02;}
 2b2:	b1 99       	sbic	0x16, 1	; 22
 2b4:	82 60       	ori	r24, 0x02	; 2
	
	if (retValue == 0x03){
 2b6:	83 30       	cpi	r24, 0x03	; 3
 2b8:	19 f4       	brne	.+6      	; 0x2c0 <mode_init+0x1e>
		cfg_TimeDelay = MY_MINIMUM;	//1.0sec 
 2ba:	91 e0       	ldi	r25, 0x01	; 1
 2bc:	90 93 61 00 	sts	0x0061, r25
	}else if(retValue > 0x03){
		 retValue = 0;
	}
	return retValue;
}
 2c0:	08 95       	ret

000002c2 <counter_reset>:
//	BIT_SET(gCountFlag,_BIT_COUNT_ON);
//	BIT_CLEAR(gCountFlag,_BIT_COUNT_DONE);
//}
void counter_reset(void)
{
	secCount = 0;
 2c2:	10 92 ac 00 	sts	0x00AC, r1
	BIT_CLEAR(gCountFlag,_BIT_COUNT_ON);
	BIT_CLEAR(gCountFlag,_BIT_COUNT_DONE);
 2c6:	80 91 ad 00 	lds	r24, 0x00AD
 2ca:	8c 7f       	andi	r24, 0xFC	; 252
 2cc:	80 93 ad 00 	sts	0x00AD, r24
 2d0:	08 95       	ret

000002d2 <counter_is_done>:
}
bool counter_is_done(uint8_t times)
{
	bool retValue = false;
	if(BIT_CHECK(gCountFlag,_BIT_COUNT_ON)){
 2d2:	90 91 ad 00 	lds	r25, 0x00AD
 2d6:	90 ff       	sbrs	r25, 0
 2d8:	0b c0       	rjmp	.+22     	; 0x2f0 <counter_is_done+0x1e>
		if(BIT_CHECK(gCountFlag,_BIT_COUNT_DONE)){
 2da:	91 fd       	sbrc	r25, 1
 2dc:	11 c0       	rjmp	.+34     	; 0x300 <counter_is_done+0x2e>
			return true;
		}
		if(secCount >= times){
 2de:	20 91 ac 00 	lds	r18, 0x00AC
 2e2:	28 17       	cp	r18, r24
 2e4:	78 f0       	brcs	.+30     	; 0x304 <counter_is_done+0x32>
			BIT_SET(gCountFlag,_BIT_COUNT_DONE);
 2e6:	92 60       	ori	r25, 0x02	; 2
 2e8:	90 93 ad 00 	sts	0x00AD, r25
			retValue = true;
 2ec:	81 e0       	ldi	r24, 0x01	; 1
 2ee:	08 95       	ret
		}
	}else{
		//Start the counter
		secCount = 0;
 2f0:	10 92 ac 00 	sts	0x00AC, r1
		BIT_SET(gCountFlag,_BIT_COUNT_ON);
		BIT_CLEAR(gCountFlag,_BIT_COUNT_DONE);
 2f4:	9d 7f       	andi	r25, 0xFD	; 253
 2f6:	91 60       	ori	r25, 0x01	; 1
 2f8:	90 93 ad 00 	sts	0x00AD, r25
	BIT_CLEAR(gCountFlag,_BIT_COUNT_ON);
	BIT_CLEAR(gCountFlag,_BIT_COUNT_DONE);
}
bool counter_is_done(uint8_t times)
{
	bool retValue = false;
 2fc:	80 e0       	ldi	r24, 0x00	; 0
 2fe:	08 95       	ret
	if(BIT_CHECK(gCountFlag,_BIT_COUNT_ON)){
		if(BIT_CHECK(gCountFlag,_BIT_COUNT_DONE)){
			return true;
 300:	81 e0       	ldi	r24, 0x01	; 1
 302:	08 95       	ret
	BIT_CLEAR(gCountFlag,_BIT_COUNT_ON);
	BIT_CLEAR(gCountFlag,_BIT_COUNT_DONE);
}
bool counter_is_done(uint8_t times)
{
	bool retValue = false;
 304:	80 e0       	ldi	r24, 0x00	; 0
		secCount = 0;
		BIT_SET(gCountFlag,_BIT_COUNT_ON);
		BIT_CLEAR(gCountFlag,_BIT_COUNT_DONE);
	}
	return retValue;
}
 306:	08 95       	ret

00000308 <set_targetAMP>:

/*************************************************/
uint16_t set_targetAMP(uint16_t targetI, uint8_t mode)
{
 308:	1f 93       	push	r17
 30a:	cf 93       	push	r28
 30c:	df 93       	push	r29
 30e:	ec 01       	movw	r28, r24
 310:	16 2f       	mov	r17, r22
	uint16_t retAMP = targetI;
	nowPIR = adc_io_read(_InSensor);
 312:	83 e0       	ldi	r24, 0x03	; 3
 314:	1c d1       	rcall	.+568    	; 0x54e <adc_io_read>
 316:	80 93 60 00 	sts	0x0060, r24
	if(nowPIR){	//Got Object
 31a:	88 23       	and	r24, r24
 31c:	51 f0       	breq	.+20     	; 0x332 <set_targetAMP+0x2a>
		retAMP = cfg_Bright[mode];
 31e:	e1 2f       	mov	r30, r17
 320:	f0 e0       	ldi	r31, 0x00	; 0
 322:	ee 0f       	add	r30, r30
 324:	ff 1f       	adc	r31, r31
 326:	e1 59       	subi	r30, 0x91	; 145
 328:	ff 4f       	sbci	r31, 0xFF	; 255
 32a:	c0 81       	ld	r28, Z
 32c:	d1 81       	ldd	r29, Z+1	; 0x01
		counter_reset();
 32e:	c9 df       	rcall	.-110    	; 0x2c2 <counter_reset>
 330:	0d c0       	rjmp	.+26     	; 0x34c <set_targetAMP+0x44>
	}else{
		if(counter_is_done(cfg_TimeDelay)){
 332:	80 91 61 00 	lds	r24, 0x0061
 336:	cd df       	rcall	.-102    	; 0x2d2 <counter_is_done>
 338:	88 23       	and	r24, r24
 33a:	41 f0       	breq	.+16     	; 0x34c <set_targetAMP+0x44>
			retAMP = cfg_Dimm[mode];
 33c:	e1 2f       	mov	r30, r17
 33e:	f0 e0       	ldi	r31, 0x00	; 0
 340:	ee 0f       	add	r30, r30
 342:	ff 1f       	adc	r31, r31
 344:	e9 59       	subi	r30, 0x99	; 153
 346:	ff 4f       	sbci	r31, 0xFF	; 255
 348:	c0 81       	ld	r28, Z
 34a:	d1 81       	ldd	r29, Z+1	; 0x01
		}
	}	
	return retAMP;
} 
 34c:	ce 01       	movw	r24, r28
 34e:	df 91       	pop	r29
 350:	cf 91       	pop	r28
 352:	1f 91       	pop	r17
 354:	08 95       	ret

00000356 <set_PWM>:
/*************************************************/
void set_PWM(uint16_t targetI, uint8_t mode)
{
	uint8_t step;
	
	if(nowAMP > targetI){
 356:	20 91 7c 00 	lds	r18, 0x007C
 35a:	30 91 7d 00 	lds	r19, 0x007D
 35e:	82 17       	cp	r24, r18
 360:	93 07       	cpc	r25, r19
 362:	90 f4       	brcc	.+36     	; 0x388 <set_PWM+0x32>
	//-Current going down -> PWM up!
		if((nowAMP-targetI)>cfg_TimeDn){step = cfg_TimeDn;
 364:	60 91 62 00 	lds	r22, 0x0062
 368:	28 1b       	sub	r18, r24
 36a:	39 0b       	sbc	r19, r25
 36c:	86 2f       	mov	r24, r22
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	82 17       	cp	r24, r18
 372:	93 07       	cpc	r25, r19
 374:	08 f0       	brcs	.+2      	; 0x378 <set_PWM+0x22>
		}else{			step = MY_MINIMUM;		}
 376:	61 e0       	ldi	r22, 0x01	; 1
		BIT_SET(gCountFlag,_BIT_SLOPE_ON);	
 378:	80 91 ad 00 	lds	r24, 0x00AD
 37c:	84 60       	ori	r24, 0x04	; 4
 37e:	80 93 ad 00 	sts	0x00AD, r24
		pwm_write(true,step);//pwm_write(false,step);	
 382:	81 e0       	ldi	r24, 0x01	; 1
 384:	31 d1       	rcall	.+610    	; 0x5e8 <pwm_write>
 386:	08 95       	ret
	}else if(nowAMP < targetI){
 388:	28 17       	cp	r18, r24
 38a:	39 07       	cpc	r19, r25
 38c:	a0 f4       	brcc	.+40     	; 0x3b6 <set_PWM+0x60>
	//-Current going up -> PWM down!
		if((targetI-nowAMP)>cfg_TimeUp[mode]){step = cfg_TimeUp[mode];
 38e:	e6 2f       	mov	r30, r22
 390:	f0 e0       	ldi	r31, 0x00	; 0
 392:	ed 59       	subi	r30, 0x9D	; 157
 394:	ff 4f       	sbci	r31, 0xFF	; 255
 396:	60 81       	ld	r22, Z
 398:	82 1b       	sub	r24, r18
 39a:	93 0b       	sbc	r25, r19
 39c:	26 2f       	mov	r18, r22
 39e:	30 e0       	ldi	r19, 0x00	; 0
 3a0:	28 17       	cp	r18, r24
 3a2:	39 07       	cpc	r19, r25
 3a4:	08 f0       	brcs	.+2      	; 0x3a8 <set_PWM+0x52>
		}else{			step = MY_MINIMUM;		}
 3a6:	61 e0       	ldi	r22, 0x01	; 1
		BIT_SET(gCountFlag,_BIT_SLOPE_ON);
 3a8:	80 91 ad 00 	lds	r24, 0x00AD
 3ac:	84 60       	ori	r24, 0x04	; 4
 3ae:	80 93 ad 00 	sts	0x00AD, r24
		pwm_write(false,step);//pwm_write(true,step);		
 3b2:	80 e0       	ldi	r24, 0x00	; 0
 3b4:	19 d1       	rcall	.+562    	; 0x5e8 <pwm_write>
 3b6:	08 95       	ret

000003b8 <main>:
***************************************************/
int main(void)
{   
	uint16_t targetAMP;
	
	debug_init(); 
 3b8:	71 df       	rcall	.-286    	; 0x29c <debug_init>
	timer_init(MY_TIC_TIME);
 3ba:	8d e0       	ldi	r24, 0x0D	; 13
 3bc:	93 e0       	ldi	r25, 0x03	; 3
 3be:	f3 d0       	rcall	.+486    	; 0x5a6 <timer_init>
	usiTwi_Slave_init(MY_ADDRESS);	
 3c0:	84 e2       	ldi	r24, 0x24	; 36
 3c2:	57 d1       	rcall	.+686    	; 0x672 <usiTwi_Slave_init>
	pwm_init(_OutPWM);
 3c4:	87 e0       	ldi	r24, 0x07	; 7
 3c6:	fa d0       	rcall	.+500    	; 0x5bc <pwm_init>
	adc_init();
 3c8:	a5 d0       	rcall	.+330    	; 0x514 <adc_init>
	adc_io_init(_InSensor);
 3ca:	83 e0       	ldi	r24, 0x03	; 3
 3cc:	b1 d0       	rcall	.+354    	; 0x530 <adc_io_init>

	set_sleep_mode(SLEEP_MODE_IDLE);
 3ce:	85 b7       	in	r24, 0x35	; 53
 3d0:	87 7e       	andi	r24, 0xE7	; 231
 3d2:	85 bf       	out	0x35, r24	; 53
	wdt_enable(WDTO_8S);
 3d4:	29 e2       	ldi	r18, 0x29	; 41
 3d6:	88 e1       	ldi	r24, 0x18	; 24
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	0f b6       	in	r0, 0x3f	; 63
 3dc:	f8 94       	cli
 3de:	a8 95       	wdr
 3e0:	81 bd       	out	0x21, r24	; 33
 3e2:	0f be       	out	0x3f, r0	; 63
 3e4:	21 bd       	out	0x21, r18	; 33

	adc_start(_InCurrent);	
 3e6:	82 e0       	ldi	r24, 0x02	; 2
 3e8:	9a d0       	rcall	.+308    	; 0x51e <adc_start>
	nowMODE = mode_init();
 3ea:	5b df       	rcall	.-330    	; 0x2a2 <mode_init>
 3ec:	80 93 7e 00 	sts	0x007E, r24
	targetAMP = cfg_Bright[nowMODE];
 3f0:	e8 2f       	mov	r30, r24
 3f2:	f0 e0       	ldi	r31, 0x00	; 0
 3f4:	ee 0f       	add	r30, r30
 3f6:	ff 1f       	adc	r31, r31
 3f8:	e1 59       	subi	r30, 0x91	; 145
 3fa:	ff 4f       	sbci	r31, 0xFF	; 255
 3fc:	c0 81       	ld	r28, Z
 3fe:	d1 81       	ldd	r29, Z+1	; 0x01
	sei();
 400:	78 94       	sei
		}
		if(BIT_CHECK(gWakeUpFlag,_BIT_SEC))	{
			BIT_CLEAR(gWakeUpFlag,_BIT_SEC);
			BIT_CLEAR(gWakeUpFlag,_BIT_TIC);
		//------------------------------
		PORT_SW = PIN_SW^(1<<_TP);
 402:	14 e0       	ldi	r17, 0x04	; 4
	nowMODE = mode_init();
	targetAMP = cfg_Bright[nowMODE];
	sei();
	while(1)
    {
		if(BIT_CHECK(gWakeUpFlag,_BIT_I2C))	{
 404:	80 91 ab 00 	lds	r24, 0x00AB
 408:	82 ff       	sbrs	r24, 2
 40a:	04 c0       	rjmp	.+8      	; 0x414 <main+0x5c>
			BIT_CLEAR(gWakeUpFlag,_BIT_I2C);
 40c:	8b 7f       	andi	r24, 0xFB	; 251
 40e:	80 93 ab 00 	sts	0x00AB, r24
			usiTwi_is_Stop();
 412:	72 d1       	rcall	.+740    	; 0x6f8 <usiTwi_is_Stop>
		}
		if(BIT_CHECK(gWakeUpFlag,_BIT_ADC))	{
 414:	80 91 ab 00 	lds	r24, 0x00AB
 418:	83 ff       	sbrs	r24, 3
 41a:	0b c0       	rjmp	.+22     	; 0x432 <main+0x7a>
			BIT_CLEAR(gWakeUpFlag,_BIT_ADC);
 41c:	87 7f       	andi	r24, 0xF7	; 247
 41e:	80 93 ab 00 	sts	0x00AB, r24
			targetAMP = set_targetAMP(targetAMP,nowMODE);
 422:	60 91 7e 00 	lds	r22, 0x007E
 426:	ce 01       	movw	r24, r28
 428:	6f df       	rcall	.-290    	; 0x308 <set_targetAMP>
 42a:	ec 01       	movw	r28, r24
			set_PWM(targetAMP,nowMODE);
 42c:	60 91 7e 00 	lds	r22, 0x007E
 430:	92 df       	rcall	.-220    	; 0x356 <set_PWM>
		}
		if(BIT_CHECK(gWakeUpFlag,_BIT_SEC))	{
 432:	80 91 ab 00 	lds	r24, 0x00AB
 436:	81 ff       	sbrs	r24, 1
 438:	08 c0       	rjmp	.+16     	; 0x44a <main+0x92>
			BIT_CLEAR(gWakeUpFlag,_BIT_SEC);
			BIT_CLEAR(gWakeUpFlag,_BIT_TIC);
 43a:	8c 7f       	andi	r24, 0xFC	; 252
 43c:	80 93 ab 00 	sts	0x00AB, r24
		//------------------------------
		PORT_SW = PIN_SW^(1<<_TP);
 440:	86 b3       	in	r24, 0x16	; 22
 442:	81 27       	eor	r24, r17
 444:	88 bb       	out	0x18, r24	; 24
		//------------------------------			
			adc_start(_InCurrent);					
 446:	82 e0       	ldi	r24, 0x02	; 2
 448:	6a d0       	rcall	.+212    	; 0x51e <adc_start>
		}
		if(BIT_CHECK(gWakeUpFlag,_BIT_TIC))	{
 44a:	80 91 ab 00 	lds	r24, 0x00AB
 44e:	80 ff       	sbrs	r24, 0
 450:	05 c0       	rjmp	.+10     	; 0x45c <main+0xa4>
			BIT_CLEAR(gWakeUpFlag,_BIT_TIC);
 452:	8e 7f       	andi	r24, 0xFE	; 254
 454:	80 93 ab 00 	sts	0x00AB, r24
			adc_start(_InCurrent);			
 458:	82 e0       	ldi	r24, 0x02	; 2
 45a:	61 d0       	rcall	.+194    	; 0x51e <adc_start>
		}
		/* */
		while( !gWakeUpFlag ) {
 45c:	80 91 ab 00 	lds	r24, 0x00AB
 460:	81 11       	cpse	r24, r1
 462:	d0 cf       	rjmp	.-96     	; 0x404 <main+0x4c>
			cli();
 464:	f8 94       	cli
			sleep_enable();
 466:	85 b7       	in	r24, 0x35	; 53
 468:	80 62       	ori	r24, 0x20	; 32
 46a:	85 bf       	out	0x35, r24	; 53
			sei();
 46c:	78 94       	sei
			sleep_cpu();
 46e:	88 95       	sleep
			sleep_disable();
 470:	85 b7       	in	r24, 0x35	; 53
 472:	8f 7d       	andi	r24, 0xDF	; 223
 474:	85 bf       	out	0x35, r24	; 53
		if(BIT_CHECK(gWakeUpFlag,_BIT_TIC))	{
			BIT_CLEAR(gWakeUpFlag,_BIT_TIC);
			adc_start(_InCurrent);			
		}
		/* */
		while( !gWakeUpFlag ) {
 476:	80 91 ab 00 	lds	r24, 0x00AB
 47a:	88 23       	and	r24, r24
 47c:	99 f3       	breq	.-26     	; 0x464 <main+0xac>
 47e:	c2 cf       	rjmp	.-124    	; 0x404 <main+0x4c>

00000480 <__vector_13>:
#include "myADC.h"



ISR(ADC_vect)
{
 480:	1f 92       	push	r1
 482:	0f 92       	push	r0
 484:	0f b6       	in	r0, 0x3f	; 63
 486:	0f 92       	push	r0
 488:	11 24       	eor	r1, r1
 48a:	2f 93       	push	r18
 48c:	3f 93       	push	r19
 48e:	4f 93       	push	r20
 490:	5f 93       	push	r21
 492:	6f 93       	push	r22
 494:	7f 93       	push	r23
 496:	8f 93       	push	r24
 498:	9f 93       	push	r25
 49a:	af 93       	push	r26
 49c:	bf 93       	push	r27
 49e:	ef 93       	push	r30
 4a0:	ff 93       	push	r31
	static uint8_t adcCount = 0;
	static uint16_t adcValue = 0;
	adcValue += ADCW;				//ADCW = ADCL+ADCH
 4a2:	84 b1       	in	r24, 0x04	; 4
 4a4:	95 b1       	in	r25, 0x05	; 5
 4a6:	20 91 80 00 	lds	r18, 0x0080
 4aa:	30 91 81 00 	lds	r19, 0x0081
 4ae:	82 0f       	add	r24, r18
 4b0:	93 1f       	adc	r25, r19
 4b2:	90 93 81 00 	sts	0x0081, r25
 4b6:	80 93 80 00 	sts	0x0080, r24
	if(++adcCount >= ADCDIVIDE){
 4ba:	80 91 7f 00 	lds	r24, 0x007F
 4be:	8f 5f       	subi	r24, 0xFF	; 255
 4c0:	80 31       	cpi	r24, 0x10	; 16
 4c2:	18 f4       	brcc	.+6      	; 0x4ca <__vector_13+0x4a>
 4c4:	80 93 7f 00 	sts	0x007F, r24
 4c8:	14 c0       	rjmp	.+40     	; 0x4f2 <__vector_13+0x72>
		adcCount = 0;		
 4ca:	10 92 7f 00 	sts	0x007F, r1
		ADCSRA &= ~( (1<<ADATE)|(1<<ADEN)|(1<<ADSC) );//ADC Disable	
 4ce:	86 b1       	in	r24, 0x06	; 6
 4d0:	8f 71       	andi	r24, 0x1F	; 31
 4d2:	86 b9       	out	0x06, r24	; 6
		call_set_nowAMP(adcValue/ADCDIVIDE);	
 4d4:	80 91 80 00 	lds	r24, 0x0080
 4d8:	90 91 81 00 	lds	r25, 0x0081
 4dc:	92 95       	swap	r25
 4de:	82 95       	swap	r24
 4e0:	8f 70       	andi	r24, 0x0F	; 15
 4e2:	89 27       	eor	r24, r25
 4e4:	9f 70       	andi	r25, 0x0F	; 15
 4e6:	89 27       	eor	r24, r25
 4e8:	ef dd       	rcall	.-1058   	; 0xc8 <call_set_nowAMP>
		adcValue = 0;	
 4ea:	10 92 81 00 	sts	0x0081, r1
 4ee:	10 92 80 00 	sts	0x0080, r1
	}
}
 4f2:	ff 91       	pop	r31
 4f4:	ef 91       	pop	r30
 4f6:	bf 91       	pop	r27
 4f8:	af 91       	pop	r26
 4fa:	9f 91       	pop	r25
 4fc:	8f 91       	pop	r24
 4fe:	7f 91       	pop	r23
 500:	6f 91       	pop	r22
 502:	5f 91       	pop	r21
 504:	4f 91       	pop	r20
 506:	3f 91       	pop	r19
 508:	2f 91       	pop	r18
 50a:	0f 90       	pop	r0
 50c:	0f be       	out	0x3f, r0	; 63
 50e:	0f 90       	pop	r0
 510:	1f 90       	pop	r1
 512:	18 95       	reti

00000514 <adc_init>:

/*************************************************
***************************************************/
void adc_init(void)
{
	ADMUX = 0;	//Voltage Reference = AVCC
 514:	17 b8       	out	0x07, r1	; 7
	
	//ADCSRA = (1<<ADEN)|(1<<ADIE)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
	ADCSRA = (1<<ADIE)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
 516:	8f e0       	ldi	r24, 0x0F	; 15
 518:	86 b9       	out	0x06, r24	; 6
	//ADEN: 0
	//ADC interrupt Enable
	//Prescale111: 128 (8MHZ/128)= 62.5KHZ
	//Prescale101: 32 (8MHZ/32)= 250KHZ
	ADCSRB = 0;
 51a:	13 b8       	out	0x03, r1	; 3
 51c:	08 95       	ret

0000051e <adc_start>:
}
/*************************************************
***************************************************/
void adc_start(uint8_t channel)
{
	ADMUX = ((ADMUX & 0xC0)| channel);	//Channel select C0=1100.0000
 51e:	97 b1       	in	r25, 0x07	; 7
 520:	90 7c       	andi	r25, 0xC0	; 192
 522:	89 2b       	or	r24, r25
 524:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= ( (1<<ADATE)|(1<<ADEN)|(1<<ADSC) );	//AutoTrigger + Enable + start
 526:	86 b1       	in	r24, 0x06	; 6
 528:	80 6e       	ori	r24, 0xE0	; 224
 52a:	86 b9       	out	0x06, r24	; 6
	ADCSRB = 0;	// Free Running Mode
 52c:	13 b8       	out	0x03, r1	; 3
 52e:	08 95       	ret

00000530 <adc_io_init>:

/*************************************************
***************************************************/
void adc_io_init(uint8_t channel)
{
	BIT_CLEAR(PORT_ADC,channel);	//Tri-state
 530:	9b b3       	in	r25, 0x1b	; 27
 532:	21 e0       	ldi	r18, 0x01	; 1
 534:	30 e0       	ldi	r19, 0x00	; 0
 536:	02 c0       	rjmp	.+4      	; 0x53c <adc_io_init+0xc>
 538:	22 0f       	add	r18, r18
 53a:	33 1f       	adc	r19, r19
 53c:	8a 95       	dec	r24
 53e:	e2 f7       	brpl	.-8      	; 0x538 <adc_io_init+0x8>
 540:	20 95       	com	r18
 542:	92 23       	and	r25, r18
 544:	9b bb       	out	0x1b, r25	; 27
	BIT_CLEAR(DDR_SW,channel);	//0=input, 1=output(Save energy)
 546:	87 b3       	in	r24, 0x17	; 23
 548:	28 23       	and	r18, r24
 54a:	27 bb       	out	0x17, r18	; 23
 54c:	08 95       	ret

0000054e <adc_io_read>:


bool adc_io_read(uint8_t channel)
{
	bool retValue=true;
	if(BIT_CHECK(PINA,_InCurrent)){ //Invert !!
 54e:	89 b3       	in	r24, 0x19	; 25
 550:	82 fb       	bst	r24, 2
 552:	88 27       	eor	r24, r24
 554:	80 f9       	bld	r24, 0
		retValue = false;
	}
	return retValue;
 556:	91 e0       	ldi	r25, 0x01	; 1
 558:	89 27       	eor	r24, r25
 55a:	08 95       	ret

0000055c <__vector_11>:

/*************************************************
***************************************************/

ISR(TIM0_OVF_vect)
{
 55c:	1f 92       	push	r1
 55e:	0f 92       	push	r0
 560:	0f b6       	in	r0, 0x3f	; 63
 562:	0f 92       	push	r0
 564:	11 24       	eor	r1, r1
 566:	2f 93       	push	r18
 568:	3f 93       	push	r19
 56a:	4f 93       	push	r20
 56c:	5f 93       	push	r21
 56e:	6f 93       	push	r22
 570:	7f 93       	push	r23
 572:	8f 93       	push	r24
 574:	9f 93       	push	r25
 576:	af 93       	push	r26
 578:	bf 93       	push	r27
 57a:	ef 93       	push	r30
 57c:	ff 93       	push	r31
	TIMSK0 = 0;			//disable interrupt
 57e:	19 be       	out	0x39, r1	; 57
	adc_start(_InCurrent);
 580:	82 e0       	ldi	r24, 0x02	; 2
 582:	cd df       	rcall	.-102    	; 0x51e <adc_start>
	
}
 584:	ff 91       	pop	r31
 586:	ef 91       	pop	r30
 588:	bf 91       	pop	r27
 58a:	af 91       	pop	r26
 58c:	9f 91       	pop	r25
 58e:	8f 91       	pop	r24
 590:	7f 91       	pop	r23
 592:	6f 91       	pop	r22
 594:	5f 91       	pop	r21
 596:	4f 91       	pop	r20
 598:	3f 91       	pop	r19
 59a:	2f 91       	pop	r18
 59c:	0f 90       	pop	r0
 59e:	0f be       	out	0x3f, r0	; 63
 5a0:	0f 90       	pop	r0
 5a2:	1f 90       	pop	r1
 5a4:	18 95       	reti

000005a6 <timer_init>:
	OCR1A = 3906; 	0.9998Hz,	1.00019sec
	OCR1A = 7813; 	0.4999Hz,	2.00040sec
	OCR1A = 39060; 	0.1000Hz, 	9.99936sec   
	*/ 
	//but real value here...                                           
	OCR1A = tic_time;	
 5a6:	9b bd       	out	0x2b, r25	; 43
 5a8:	8a bd       	out	0x2a, r24	; 42
	//OCR1A = 1953			//1953=0.25sec
	//OCR1A = 3906;			//3906=0.50sec
	//OCR1A = 7812;			//7812=1.00sec	
	TCNT1  = 0;
 5aa:	1d bc       	out	0x2d, r1	; 45
 5ac:	1c bc       	out	0x2c, r1	; 44
		///Timer1 prescaler = F_clk/1024
		///Timer1 mode = CTC with OCR1A(WGM = 0b0100)
		///No port out	
	TCCR1A = 0;
 5ae:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = (1<<WGM12)|(1<<CS12)|(1<<CS10);
 5b0:	8d e0       	ldi	r24, 0x0D	; 13
 5b2:	8e bd       	out	0x2e, r24	; 46
		///0x0D->Clock On, divide by 1024		
		///0x08->Clock STOP!
		///(1<<WGM12)
	TCCR1C = 0;	
 5b4:	12 bc       	out	0x22, r1	; 34
	TIMSK1 = (1<<OCIE1A);	// enable timer ISR
 5b6:	82 e0       	ldi	r24, 0x02	; 2
 5b8:	8c b9       	out	0x0c, r24	; 12
 5ba:	08 95       	ret

000005bc <pwm_init>:
/*************************************************
***************************************************/
void pwm_init(uint8_t channel)
{
	// Use Timer0
	BIT_SET(DDR_PWM,channel);	//PB2,OC0A
 5bc:	4a b3       	in	r20, 0x1a	; 26
 5be:	21 e0       	ldi	r18, 0x01	; 1
 5c0:	30 e0       	ldi	r19, 0x00	; 0
 5c2:	b9 01       	movw	r22, r18
 5c4:	02 c0       	rjmp	.+4      	; 0x5ca <pwm_init+0xe>
 5c6:	66 0f       	add	r22, r22
 5c8:	77 1f       	adc	r23, r23
 5ca:	8a 95       	dec	r24
 5cc:	e2 f7       	brpl	.-8      	; 0x5c6 <pwm_init+0xa>
 5ce:	cb 01       	movw	r24, r22
 5d0:	84 2b       	or	r24, r20
 5d2:	8a bb       	out	0x1a, r24	; 26
	TCCR0A = (1<<COM0B1)|(1<<WGM01)|(1<<WGM00); 
 5d4:	83 e2       	ldi	r24, 0x23	; 35
 5d6:	80 bf       	out	0x30, r24	; 48
	//0x23 = 0010.0011;
	//COM0B[1:0] = 2 :2= non-Inverted PWM / 3= Inverted PWM
	//WGM[02:00] = 3 :FastPWM (0 to 0xFF)
	//WGM[02:00] = 7 :FastPWM (0 to OCR0A)(use this)
	
	TCCR0B = (1<<WGM02)|(1<<CS01)|(1<<CS00); 
 5d8:	8b e0       	ldi	r24, 0x0B	; 11
 5da:	83 bf       	out	0x33, r24	; 51
	//	0x0B = 0000.1011;		//WGM02 = 1
	//CS[02:00] =  3 :clk/64 Prescaler
	TCNT0 = 0;
 5dc:	12 be       	out	0x32, r1	; 50
	OCR0A = MY_PWM_FREQ;		//240 if WGM=3,//0xF0 if WGM=7,TOP==OCR0A
 5de:	80 ef       	ldi	r24, 0xF0	; 240
 5e0:	86 bf       	out	0x36, r24	; 54
	// It's 500.0Hz
	
	OCR0B = INIT_PWM_DUTY;		//initial set,almost 0% duty = 3.19A
 5e2:	8c bf       	out	0x3c, r24	; 60
	TIMSK0 = 0;			//start from disable interrupt
 5e4:	19 be       	out	0x39, r1	; 57
 5e6:	08 95       	ret

000005e8 <pwm_write>:
/*************************************************
***************************************************/
void pwm_write(bool inc, uint8_t step)
{
	
	uint8_t nowDuty = OCR0B;
 5e8:	4c b7       	in	r20, 0x3c	; 60
	uint8_t nowFreq = OCR0A;
 5ea:	56 b7       	in	r21, 0x36	; 54
	//		if( nowDuty != 0 ){		OCR0B = (--nowDuty);}
	//		/*if(nowDuty == 0){power-off(); */
	//	}
	//}// end for
	//----------------------------------------------------option #2
	if(inc){	//---increase Duty
 5ec:	88 23       	and	r24, r24
 5ee:	71 f0       	breq	.+28     	; 0x60c <pwm_write+0x24>
		//power_on();
		if((nowDuty+step) < nowFreq ){ 
 5f0:	26 2f       	mov	r18, r22
 5f2:	30 e0       	ldi	r19, 0x00	; 0
 5f4:	24 0f       	add	r18, r20
 5f6:	31 1d       	adc	r19, r1
 5f8:	85 2f       	mov	r24, r21
 5fa:	90 e0       	ldi	r25, 0x00	; 0
 5fc:	28 17       	cp	r18, r24
 5fe:	39 07       	cpc	r19, r25
 600:	1c f4       	brge	.+6      	; 0x608 <pwm_write+0x20>
			OCR0B = nowDuty+step;
 602:	64 0f       	add	r22, r20
 604:	6c bf       	out	0x3c, r22	; 60
 606:	0d c0       	rjmp	.+26     	; 0x622 <pwm_write+0x3a>
		}else{
			OCR0B = nowFreq;
 608:	5c bf       	out	0x3c, r21	; 60
 60a:	0b c0       	rjmp	.+22     	; 0x622 <pwm_write+0x3a>
		}
		
	}else{		//---decrease Duty
		if((nowDuty-step) > 0){
 60c:	84 2f       	mov	r24, r20
 60e:	90 e0       	ldi	r25, 0x00	; 0
 610:	86 1b       	sub	r24, r22
 612:	91 09       	sbc	r25, r1
 614:	18 16       	cp	r1, r24
 616:	19 06       	cpc	r1, r25
 618:	1c f4       	brge	.+6      	; 0x620 <pwm_write+0x38>
			OCR0B = nowDuty-step;
 61a:	46 1b       	sub	r20, r22
 61c:	4c bf       	out	0x3c, r20	; 60
 61e:	01 c0       	rjmp	.+2      	; 0x622 <pwm_write+0x3a>
		}else{
			OCR0B = 0;
 620:	1c be       	out	0x3c, r1	; 60
		}
		/*if(nowDuty == 0){power-off(); */
	}
	TIMSK0 = (1<<TOIE0);//Enable TOV0 interrupt
 622:	81 e0       	ldi	r24, 0x01	; 1
 624:	89 bf       	out	0x39, r24	; 57
 626:	08 95       	ret

00000628 <SET_USI_TO_SEND_ACK>:
********************************************************************************/

void SET_USI_TO_SEND_ACK(void )
{ 
	/* prepare ACK */ 
	USIDR = 0; 
 628:	1f b8       	out	0x0f, r1	; 15
	/* set SDA as output */ 
	DDR_USI |= ( 1 << PORT_USI_SDA ); 
 62a:	d6 9a       	sbi	0x1a, 6	; 26
	/* clear all interrupt flags, except Start Cond */ 
	USISR = 
 62c:	8e e7       	ldi	r24, 0x7E	; 126
 62e:	8e b9       	out	0x0e, r24	; 14
 630:	08 95       	ret

00000632 <SET_USI_TO_READ_ACK>:
}

void SET_USI_TO_READ_ACK(void )
{ 
	/* set SDA as input */ 
	DDR_USI &= ~( 1 << PORT_USI_SDA ); 
 632:	d6 98       	cbi	0x1a, 6	; 26
	/* prepare ACK */
	USIDR = 0; 
 634:	1f b8       	out	0x0f, r1	; 15
	/* clear all interrupt flags, except Start Cond */ 
	USISR = 
 636:	8e e7       	ldi	r24, 0x7E	; 126
 638:	8e b9       	out	0x0e, r24	; 14
 63a:	08 95       	ret

0000063c <SET_USI_TO_START_CONDITION_MODE>:
	/* set USI counter to shift 1 bit */ 	
}

void SET_USI_TO_START_CONDITION_MODE(void ) 
{ 
	USICR = 
 63c:	88 ea       	ldi	r24, 0xA8	; 168
 63e:	8d b9       	out	0x0d, r24	; 13
	/* Shift Register Clock Source = External, positive edge */ 
	/* 4-Bit Counter Source = external, both edges */ 
	( 1 << USICS1 ) | ( 0 << USICS0 ) | ( 0 << USICLK ) | \
	/* no toggle clock-port pin */ 
	( 0 << USITC ); 
	USISR = 
 640:	80 e7       	ldi	r24, 0x70	; 112
 642:	8e b9       	out	0x0e, r24	; 14
 644:	08 95       	ret

00000646 <SET_USI_TO_SEND_DATA>:
}

void SET_USI_TO_SEND_DATA(void ) 
{ 
	/* set SDA as output */ 
	DDR_USI |=  ( 1 << PORT_USI_SDA ); 
 646:	d6 9a       	sbi	0x1a, 6	; 26
	/* clear all interrupt flags, except Start Cond */ 
	USISR    =  
 648:	80 e7       	ldi	r24, 0x70	; 112
 64a:	8e b9       	out	0x0e, r24	; 14
 64c:	08 95       	ret

0000064e <SET_USI_TO_READ_DATA>:
}

void SET_USI_TO_READ_DATA(void ) 
{ 
	/* set SDA as input */ 
	DDR_USI &= ~( 1 << PORT_USI_SDA ); 
 64e:	d6 98       	cbi	0x1a, 6	; 26
	/* clear all interrupt flags, except Start Cond */
	USISR    = 
 650:	80 e7       	ldi	r24, 0x70	; 112
 652:	8e b9       	out	0x0e, r24	; 14
 654:	08 95       	ret

00000656 <usiTwi_flushTxBuffers>:
                                public functions
********************************************************************************/
// flushes the TWI buffers
void usiTwi_flushTxBuffers(void)
{
   txTail = 0;  txHead = 0;  txCount = 0;
 656:	10 92 83 00 	sts	0x0083, r1
 65a:	10 92 84 00 	sts	0x0084, r1
 65e:	10 92 82 00 	sts	0x0082, r1
 662:	08 95       	ret

00000664 <usiTwi_flushRxBuffers>:
}

void usiTwi_flushRxBuffers(void)
{
	rxTail = 0;  rxHead = 0;  rxCount = 0;
 664:	10 92 96 00 	sts	0x0096, r1
 668:	10 92 97 00 	sts	0x0097, r1
 66c:	10 92 95 00 	sts	0x0095, r1
 670:	08 95       	ret

00000672 <usiTwi_Slave_init>:
/********************************************************************************
********************************************************************************/
// initialize USI for TWI slave mode

void usiTwi_Slave_init(uint8_t ownAddress)
{
 672:	cf 93       	push	r28
 674:	c8 2f       	mov	r28, r24
  usiTwi_flushTxBuffers();
 676:	ef df       	rcall	.-34     	; 0x656 <usiTwi_flushTxBuffers>
  usiTwi_flushRxBuffers();
 678:	f5 df       	rcall	.-22     	; 0x664 <usiTwi_flushRxBuffers>

  slaveAddress = ownAddress;
 67a:	c0 93 a8 00 	sts	0x00A8, r28
  // low when a start condition is detected or a counter overflow (only
  // for USIWM1, USIWM0 = 11).  This inserts a wait state.  SCL is released
  // by the ISRs (USI_START_vect and USI_OVERFLOW_vect).

  //1. Set SCL and SDA as output
  DDR_USI |= ( 1 << PORT_USI_SCL ) | ( 1 << PORT_USI_SDA );
 67e:	8a b3       	in	r24, 0x1a	; 26
 680:	80 65       	ori	r24, 0x50	; 80
 682:	8a bb       	out	0x1a, r24	; 26
  //2. set SCL high
  PORT_USI |= ( 1 << PORT_USI_SCL );
 684:	dc 9a       	sbi	0x1b, 4	; 27
  //3. set SDA high
  PORT_USI |= ( 1 << PORT_USI_SDA );
 686:	de 9a       	sbi	0x1b, 6	; 27

  //4. Set SDA as input
  DDR_USI &= ~( 1 << PORT_USI_SDA );
 688:	d6 98       	cbi	0x1a, 6	; 26
  //5. Set registers
  USICR =
 68a:	88 ea       	ldi	r24, 0xA8	; 168
 68c:	8d b9       	out	0x0d, r24	; 13
       ( 1 << USICS1 ) | ( 0 << USICS0 ) | ( 0 << USICLK ) |
       // no toggle clock-port pin
       ( 0 << USITC );

  // clear all interrupt flags and reset overflow counter(USICNT3:0)
  USISR = ( 1 << USISIF ) | ( 1 << USIOIF ) | ( 1 << USIPF ) | ( 1 << USIDC ) | ( 0x0 << USICNT0);
 68e:	80 ef       	ldi	r24, 0xF0	; 240
 690:	8e b9       	out	0x0e, r24	; 14

}
 692:	cf 91       	pop	r28
 694:	08 95       	ret

00000696 <usiTwi_ByteToTxBuffer>:

// put data(a byte) in the transmission buffer, wait if buffer is full
void usiTwi_ByteToTxBuffer(uint8_t tx_data)
{
	//wait for free space in buffer
	while ( txCount == TWI_TX_BUFFER_SIZE) ;
 696:	90 91 82 00 	lds	r25, 0x0082
 69a:	90 31       	cpi	r25, 0x10	; 16
 69c:	e1 f3       	breq	.-8      	; 0x696 <usiTwi_ByteToTxBuffer>

	// store data in buffer
	txBuf[ txHead ] = tx_data;
 69e:	e0 91 84 00 	lds	r30, 0x0084
 6a2:	f0 e0       	ldi	r31, 0x00	; 0
 6a4:	eb 57       	subi	r30, 0x7B	; 123
 6a6:	ff 4f       	sbci	r31, 0xFF	; 255
 6a8:	80 83       	st	Z, r24
	txHead = ( txHead + 1 ) & TWI_TX_BUFFER_MASK;
 6aa:	80 91 84 00 	lds	r24, 0x0084
 6ae:	8f 5f       	subi	r24, 0xFF	; 255
 6b0:	8f 70       	andi	r24, 0x0F	; 15
 6b2:	80 93 84 00 	sts	0x0084, r24
	txCount++;
 6b6:	80 91 82 00 	lds	r24, 0x0082
 6ba:	8f 5f       	subi	r24, 0xFF	; 255
 6bc:	80 93 82 00 	sts	0x0082, r24
 6c0:	08 95       	ret

000006c2 <usiTwi_ByteFromRxBuffer>:
// return a byte from the receive buffer, wait if buffer is empty
uint8_t usiTwi_ByteFromRxBuffer(void)
{
	uint8_t rx_data;
	// wait for Rx data
	while ( !rxCount );
 6c2:	80 91 95 00 	lds	r24, 0x0095
 6c6:	88 23       	and	r24, r24
 6c8:	e1 f3       	breq	.-8      	; 0x6c2 <usiTwi_ByteFromRxBuffer>

	rx_data = rxBuf [ rxTail ];
 6ca:	e0 91 96 00 	lds	r30, 0x0096
 6ce:	f0 e0       	ldi	r31, 0x00	; 0
 6d0:	e8 56       	subi	r30, 0x68	; 104
 6d2:	ff 4f       	sbci	r31, 0xFF	; 255
 6d4:	80 81       	ld	r24, Z
	rxTail = ( rxTail + 1 ) & TWI_RX_BUFFER_MASK;
 6d6:	90 91 96 00 	lds	r25, 0x0096
 6da:	9f 5f       	subi	r25, 0xFF	; 255
 6dc:	9f 70       	andi	r25, 0x0F	; 15
 6de:	90 93 96 00 	sts	0x0096, r25
	rxCount--;
 6e2:	90 91 95 00 	lds	r25, 0x0095
 6e6:	91 50       	subi	r25, 0x01	; 1
 6e8:	90 93 95 00 	sts	0x0095, r25

	return rx_data;
}
 6ec:	08 95       	ret

000006ee <usiTwi_Set_TxBuffer>:
{
	return txCount;
}
uint8_t usiTwi_is_DataInRxBuffer(void)
{
	return rxCount;
 6ee:	80 91 95 00 	lds	r24, 0x0095
/********************************************************************************
********************************************************************************/
void usiTwi_Set_TxBuffer(void)
{
	uint8_t amount = usiTwi_is_DataInRxBuffer();
	if(amount == 0){	return; }			//No data in buffer
 6f2:	81 11       	cpse	r24, r1

	call_set_TxBuffer(amount);
 6f4:	f3 dc       	rcall	.-1562   	; 0xdc <call_set_TxBuffer>
 6f6:	08 95       	ret

000006f8 <usiTwi_is_Stop>:


void usiTwi_is_Stop(void)
{
	//if(!usi_onReceiverPtr()){ return; }	//No receive callback, Nothing to do
	if(!(USISR & (1<<USIPF))){	return; }	//Stop not detected
 6f8:	75 99       	sbic	0x0e, 5	; 14

	usiTwi_Set_TxBuffer();
 6fa:	f9 df       	rcall	.-14     	; 0x6ee <usiTwi_Set_TxBuffer>
 6fc:	08 95       	ret

000006fe <__vector_15>:
/********************************************************************************
                            USI Start Condition ISR
********************************************************************************/

ISR( USI_START_VECTOR )
{
 6fe:	1f 92       	push	r1
 700:	0f 92       	push	r0
 702:	0f b6       	in	r0, 0x3f	; 63
 704:	0f 92       	push	r0
 706:	11 24       	eor	r1, r1
 708:	8f 93       	push	r24
  // This triggers on second write, but claims to the callback there is only *one* byte in buffer
  USI_RECEIVE_CALLBACK();
  */

  // set default starting conditions for new TWI package
  overflowState = USI_SLAVE_CHECK_ADDRESS;
 70a:	10 92 a9 00 	sts	0x00A9, r1

  //1. set SDA as input
  DDR_USI &= ~( 1 << PORT_USI_SDA );
 70e:	d6 98       	cbi	0x1a, 6	; 26
  // start detector will hold SCL low ) - if a Stop Condition arises then leave
  // the interrupt to prevent waiting forever - don't use USISR to test for Stop
  // Condition as in Application Note AVR312 because the Stop Condition Flag is
  // going to be set from the last TWI sequence  
       // SCL his high .........................// and SDA is low
  while (( PIN_USI & ( 1 << PIN_USI_SCL ) ) && !( ( PIN_USI & ( 1 << PIN_USI_SDA ) ) ) );
 710:	cc 9b       	sbis	0x19, 4	; 25
 712:	02 c0       	rjmp	.+4      	; 0x718 <__vector_15+0x1a>
 714:	ce 9b       	sbis	0x19, 6	; 25
 716:	fc cf       	rjmp	.-8      	; 0x710 <__vector_15+0x12>
	// 	sda = low	scl = high		loop
	//	sda = high	scl = low		break	stop condition
	//	sda = high	scl = high		break	stop condition
	
	
  if ( !( PIN_USI & ( 1 << PIN_USI_SDA ) ) ) {    // a Stop Condition did NOT occur
 718:	ce 99       	sbic	0x19, 6	; 25
 71a:	03 c0       	rjmp	.+6      	; 0x722 <__vector_15+0x24>
    USICR =
 71c:	88 ef       	ldi	r24, 0xF8	; 248
 71e:	8d b9       	out	0x0d, r24	; 13
 720:	02 c0       	rjmp	.+4      	; 0x726 <__vector_15+0x28>
         ( 1 << USICS1 ) | ( 0 << USICS0 ) | ( 0 << USICLK ) |
         // no toggle clock-port pin
         ( 0 << USITC );

  }  else  {									// a Stop Condition did occur
    USICR =
 722:	88 ea       	ldi	r24, 0xA8	; 168
 724:	8d b9       	out	0x0d, r24	; 13
         // no toggle clock-port pin
         ( 0 << USITC );

  } // end if

  USISR =
 726:	80 ef       	ldi	r24, 0xF0	; 240
 728:	8e b9       	out	0x0e, r24	; 14
       // clear interrupt flags - resetting the Start Condition Flag will release SCL
	   // set USI to sample 8 bits (count 16 external SCL pin toggles)
       ( 1 << USISIF ) | ( 1 << USIOIF ) | ( 1 << USIPF ) |( 1 << USIDC ) | ( 0x0 << USICNT0);


} // end ISR( USI_START_VECTOR )
 72a:	8f 91       	pop	r24
 72c:	0f 90       	pop	r0
 72e:	0f be       	out	0x3f, r0	; 63
 730:	0f 90       	pop	r0
 732:	1f 90       	pop	r1
 734:	18 95       	reti

00000736 <__vector_16>:
Handles all the communication.
Only disabled when waiting for a new Start Condition.
********************************************************************************/

ISR( USI_OVERFLOW_VECTOR )
{
 736:	1f 92       	push	r1
 738:	0f 92       	push	r0
 73a:	0f b6       	in	r0, 0x3f	; 63
 73c:	0f 92       	push	r0
 73e:	11 24       	eor	r1, r1
 740:	2f 93       	push	r18
 742:	3f 93       	push	r19
 744:	4f 93       	push	r20
 746:	5f 93       	push	r21
 748:	6f 93       	push	r22
 74a:	7f 93       	push	r23
 74c:	8f 93       	push	r24
 74e:	9f 93       	push	r25
 750:	af 93       	push	r26
 752:	bf 93       	push	r27
 754:	ef 93       	push	r30
 756:	ff 93       	push	r31
  switch ( overflowState )
 758:	80 91 a9 00 	lds	r24, 0x00A9
 75c:	82 30       	cpi	r24, 0x02	; 2
 75e:	09 f4       	brne	.+2      	; 0x762 <__vector_16+0x2c>
 760:	4d c0       	rjmp	.+154    	; 0x7fc <__vector_16+0xc6>
 762:	28 f4       	brcc	.+10     	; 0x76e <__vector_16+0x38>
 764:	88 23       	and	r24, r24
 766:	59 f0       	breq	.+22     	; 0x77e <__vector_16+0x48>
 768:	81 30       	cpi	r24, 0x01	; 1
 76a:	51 f1       	breq	.+84     	; 0x7c0 <__vector_16+0x8a>
 76c:	6b c0       	rjmp	.+214    	; 0x844 <__vector_16+0x10e>
 76e:	84 30       	cpi	r24, 0x04	; 4
 770:	09 f4       	brne	.+2      	; 0x774 <__vector_16+0x3e>
 772:	49 c0       	rjmp	.+146    	; 0x806 <__vector_16+0xd0>
 774:	00 f1       	brcs	.+64     	; 0x7b6 <__vector_16+0x80>
 776:	85 30       	cpi	r24, 0x05	; 5
 778:	09 f4       	brne	.+2      	; 0x77c <__vector_16+0x46>
 77a:	4a c0       	rjmp	.+148    	; 0x810 <__vector_16+0xda>
 77c:	63 c0       	rjmp	.+198    	; 0x844 <__vector_16+0x10e>
  {
	// -----------------------------------------------------------------------------
    // Address mode: check address and send ACK (and next USI_SLAVE_SEND_DATA) if OK,
    // else reset USI
    case USI_SLAVE_CHECK_ADDRESS:
      if ( ( USIDR == 0 ) || ( ( USIDR >> 1 ) == slaveAddress) )
 77e:	8f b1       	in	r24, 0x0f	; 15
 780:	88 23       	and	r24, r24
 782:	31 f0       	breq	.+12     	; 0x790 <__vector_16+0x5a>
 784:	9f b1       	in	r25, 0x0f	; 15
 786:	96 95       	lsr	r25
 788:	80 91 a8 00 	lds	r24, 0x00A8
 78c:	98 13       	cpse	r25, r24
 78e:	11 c0       	rjmp	.+34     	; 0x7b2 <__vector_16+0x7c>
      {
        //??? Note: USICR must be set to 14(0x1110) before releasing SCL
		if ( USIDR & 0x01 )	//----------------->1=[Master read] 
 790:	78 9b       	sbis	0x0f, 0	; 15
 792:	09 c0       	rjmp	.+18     	; 0x7a6 <__vector_16+0x70>

}

uint8_t usiTwi_is_DataInTxBuffer(void)
{
	return txCount;
 794:	80 91 82 00 	lds	r24, 0x0082
      {
        //??? Note: USICR must be set to 14(0x1110) before releasing SCL
		if ( USIDR & 0x01 )	//----------------->1=[Master read] 
        {
          ///////////////////////////////////////
		  if( ! usiTwi_is_DataInTxBuffer() ){  usiTwi_Set_TxBuffer();  }			  	  
 798:	81 11       	cpse	r24, r1
 79a:	01 c0       	rjmp	.+2      	; 0x79e <__vector_16+0x68>
 79c:	a8 df       	rcall	.-176    	; 0x6ee <usiTwi_Set_TxBuffer>
		  //////////////////////////////////////
          overflowState = USI_SLAVE_SEND_DATA; //Wait for send data~
 79e:	81 e0       	ldi	r24, 0x01	; 1
 7a0:	80 93 a9 00 	sts	0x00A9, r24
 7a4:	04 c0       	rjmp	.+8      	; 0x7ae <__vector_16+0x78>
		  
        } else {	//-------------------------> 0=[Master write] 
          //////////////////////////////////////
		  usiTwi_flushRxBuffers();
 7a6:	5e df       	rcall	.-324    	; 0x664 <usiTwi_flushRxBuffers>
		  //////////////////////////////////////
		  overflowState = USI_SLAVE_REQUEST_DATA;
 7a8:	84 e0       	ldi	r24, 0x04	; 4
 7aa:	80 93 a9 00 	sts	0x00A9, r24
		  
        }
        SET_USI_TO_SEND_ACK( ); //shift 1 bit
 7ae:	3c df       	rcall	.-392    	; 0x628 <SET_USI_TO_SEND_ACK>
 7b0:	49 c0       	rjmp	.+146    	; 0x844 <__vector_16+0x10e>
		
      } else {
        SET_USI_TO_START_CONDITION_MODE( );
 7b2:	44 df       	rcall	.-376    	; 0x63c <SET_USI_TO_START_CONDITION_MODE>
 7b4:	47 c0       	rjmp	.+142    	; 0x844 <__vector_16+0x10e>
	// -----------------------------------------------------------------------------	  
	// -----------------------------------------------------------------------------
    // Master write data mode: check reply and goto USI_SLAVE_SEND_DATA if OK,
    // else reset USI
    case USI_SLAVE_CHECK_REPLY_SEND_DATA:
      if ( USIDR ){
 7b6:	8f b1       	in	r24, 0x0f	; 15
 7b8:	88 23       	and	r24, r24
 7ba:	11 f0       	breq	.+4      	; 0x7c0 <__vector_16+0x8a>
        // if NACK, the master does not want more data
        SET_USI_TO_START_CONDITION_MODE( );
 7bc:	3f df       	rcall	.-386    	; 0x63c <SET_USI_TO_START_CONDITION_MODE>
        return;
 7be:	43 c0       	rjmp	.+134    	; 0x846 <__vector_16+0x110>
	// -----------------------------------------------------------------------------
    // copy data from buffer to USIDR and set USI to shift byte
    // next USI_SLAVE_REQUEST_REPLY_FROM_SEND_DATA
    case USI_SLAVE_SEND_DATA:		/* #1 */
      // Get data from Buffer
      if ( txCount )
 7c0:	80 91 82 00 	lds	r24, 0x0082
 7c4:	88 23       	and	r24, r24
 7c6:	b9 f0       	breq	.+46     	; 0x7f6 <__vector_16+0xc0>
      {
        USIDR = txBuf[ txTail ];
 7c8:	e0 91 83 00 	lds	r30, 0x0083
 7cc:	f0 e0       	ldi	r31, 0x00	; 0
 7ce:	eb 57       	subi	r30, 0x7B	; 123
 7d0:	ff 4f       	sbci	r31, 0xFF	; 255
 7d2:	80 81       	ld	r24, Z
 7d4:	8f b9       	out	0x0f, r24	; 15
        txTail = ( txTail + 1 ) & TWI_TX_BUFFER_MASK;
 7d6:	80 91 83 00 	lds	r24, 0x0083
 7da:	8f 5f       	subi	r24, 0xFF	; 255
 7dc:	8f 70       	andi	r24, 0x0F	; 15
 7de:	80 93 83 00 	sts	0x0083, r24
        txCount--;
 7e2:	80 91 82 00 	lds	r24, 0x0082
 7e6:	81 50       	subi	r24, 0x01	; 1
 7e8:	80 93 82 00 	sts	0x0082, r24
        // the buffer is empty
        SET_USI_TO_READ_ACK( ); // This might be neccessary sometimes see http://www.avrfreaks.net/index.php?name=PNphpBB2&file=viewtopic&p=805227#805227
        SET_USI_TO_START_CONDITION_MODE( );
        return;
      } // end if
      overflowState = USI_SLAVE_1ST_CHECK_REPLY_SEND_DATA;
 7ec:	82 e0       	ldi	r24, 0x02	; 2
 7ee:	80 93 a9 00 	sts	0x00A9, r24
      SET_USI_TO_SEND_DATA( );
 7f2:	29 df       	rcall	.-430    	; 0x646 <SET_USI_TO_SEND_DATA>
      break;
 7f4:	27 c0       	rjmp	.+78     	; 0x844 <__vector_16+0x10e>
        USIDR = txBuf[ txTail ];
        txTail = ( txTail + 1 ) & TWI_TX_BUFFER_MASK;
        txCount--;
      } else {
        // the buffer is empty
        SET_USI_TO_READ_ACK( ); // This might be neccessary sometimes see http://www.avrfreaks.net/index.php?name=PNphpBB2&file=viewtopic&p=805227#805227
 7f6:	1d df       	rcall	.-454    	; 0x632 <SET_USI_TO_READ_ACK>
        SET_USI_TO_START_CONDITION_MODE( );
 7f8:	21 df       	rcall	.-446    	; 0x63c <SET_USI_TO_START_CONDITION_MODE>
        return;
 7fa:	25 c0       	rjmp	.+74     	; 0x846 <__vector_16+0x110>
	  
	// -----------------------------------------------------------------------------
    // set USI to sample reply from master
    // next USI_SLAVE_CHECK_REPLY_FROM_SEND_DATA
    case USI_SLAVE_1ST_CHECK_REPLY_SEND_DATA:
      overflowState = USI_SLAVE_CHECK_REPLY_SEND_DATA;
 7fc:	83 e0       	ldi	r24, 0x03	; 3
 7fe:	80 93 a9 00 	sts	0x00A9, r24
      SET_USI_TO_READ_ACK( );
 802:	17 df       	rcall	.-466    	; 0x632 <SET_USI_TO_READ_ACK>
      break;
 804:	1f c0       	rjmp	.+62     	; 0x844 <__vector_16+0x10e>
	// -----------------------------------------------------------------------------
	// -----------------------------------------------------------------------------
    // Master read data mode: set USI to sample data from master, next
    // USI_SLAVE_GET_DATA_AND_SEND_ACK
    case USI_SLAVE_REQUEST_DATA:
      overflowState = USI_SLAVE_GET_DATA_AND_SEND_ACK;
 806:	85 e0       	ldi	r24, 0x05	; 5
 808:	80 93 a9 00 	sts	0x00A9, r24
      SET_USI_TO_READ_DATA( );
 80c:	20 df       	rcall	.-448    	; 0x64e <SET_USI_TO_READ_DATA>
      break;
 80e:	1a c0       	rjmp	.+52     	; 0x844 <__vector_16+0x10e>
    // copy data from USIDR and send ACK
    // next USI_SLAVE_REQUEST_DATA
    case USI_SLAVE_GET_DATA_AND_SEND_ACK:
      // put data into buffer
      // check buffer size
      if ( rxCount < TWI_RX_BUFFER_SIZE )
 810:	80 91 95 00 	lds	r24, 0x0095
 814:	80 31       	cpi	r24, 0x10	; 16
 816:	90 f4       	brcc	.+36     	; 0x83c <__vector_16+0x106>
      {
        rxBuf[ rxHead ] = USIDR;
 818:	e0 91 97 00 	lds	r30, 0x0097
 81c:	8f b1       	in	r24, 0x0f	; 15
 81e:	f0 e0       	ldi	r31, 0x00	; 0
 820:	e8 56       	subi	r30, 0x68	; 104
 822:	ff 4f       	sbci	r31, 0xFF	; 255
 824:	80 83       	st	Z, r24
        rxHead = ( rxHead + 1 ) & TWI_RX_BUFFER_MASK;
 826:	80 91 97 00 	lds	r24, 0x0097
 82a:	8f 5f       	subi	r24, 0xFF	; 255
 82c:	8f 70       	andi	r24, 0x0F	; 15
 82e:	80 93 97 00 	sts	0x0097, r24
        rxCount++;
 832:	80 91 95 00 	lds	r24, 0x0095
 836:	8f 5f       	subi	r24, 0xFF	; 255
 838:	80 93 95 00 	sts	0x0095, r24
      } else {
        // overrun
        // drop data
      }
      // next USI_SLAVE_REQUEST_DATA
      overflowState = USI_SLAVE_REQUEST_DATA;
 83c:	84 e0       	ldi	r24, 0x04	; 4
 83e:	80 93 a9 00 	sts	0x00A9, r24
      SET_USI_TO_SEND_ACK( );
 842:	f2 de       	rcall	.-540    	; 0x628 <SET_USI_TO_SEND_ACK>
      break;

  } // end switch
	set_gWakeUpFlag_i2c();
 844:	3b dc       	rcall	.-1930   	; 0xbc <set_gWakeUpFlag_i2c>

 846:	ff 91       	pop	r31
 848:	ef 91       	pop	r30
 84a:	bf 91       	pop	r27
 84c:	af 91       	pop	r26
 84e:	9f 91       	pop	r25
 850:	8f 91       	pop	r24
 852:	7f 91       	pop	r23
 854:	6f 91       	pop	r22
 856:	5f 91       	pop	r21
 858:	4f 91       	pop	r20
 85a:	3f 91       	pop	r19
 85c:	2f 91       	pop	r18
 85e:	0f 90       	pop	r0
 860:	0f be       	out	0x3f, r0	; 63
 862:	0f 90       	pop	r0
 864:	1f 90       	pop	r1
 866:	18 95       	reti

00000868 <_exit>:
 868:	f8 94       	cli

0000086a <__stop_program>:
 86a:	ff cf       	rjmp	.-2      	; 0x86a <__stop_program>
