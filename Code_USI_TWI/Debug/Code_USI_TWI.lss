
Code_USI_TWI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000546  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  00000546  000005da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000031  0080007a  0080007a  000005f4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005f4  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000100  00000000  00000000  00000624  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000089a  00000000  00000000  00000724  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000371  00000000  00000000  00000fbe  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000047e  00000000  00000000  0000132f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000024c  00000000  00000000  000017b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004c9  00000000  00000000  000019fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000384  00000000  00000000  00001ec5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d0  00000000  00000000  00002249  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	2a c0       	rjmp	.+84     	; 0x58 <__bad_interrupt>
   4:	29 c0       	rjmp	.+82     	; 0x58 <__bad_interrupt>
   6:	28 c0       	rjmp	.+80     	; 0x58 <__bad_interrupt>
   8:	27 c0       	rjmp	.+78     	; 0x58 <__bad_interrupt>
   a:	26 c0       	rjmp	.+76     	; 0x58 <__bad_interrupt>
   c:	26 c0       	rjmp	.+76     	; 0x5a <__vector_6>
   e:	24 c0       	rjmp	.+72     	; 0x58 <__bad_interrupt>
  10:	23 c0       	rjmp	.+70     	; 0x58 <__bad_interrupt>
  12:	22 c0       	rjmp	.+68     	; 0x58 <__bad_interrupt>
  14:	21 c0       	rjmp	.+66     	; 0x58 <__bad_interrupt>
  16:	20 c0       	rjmp	.+64     	; 0x58 <__bad_interrupt>
  18:	1f c0       	rjmp	.+62     	; 0x58 <__bad_interrupt>
  1a:	1e c0       	rjmp	.+60     	; 0x58 <__bad_interrupt>
  1c:	1d c0       	rjmp	.+58     	; 0x58 <__bad_interrupt>
  1e:	dc c1       	rjmp	.+952    	; 0x3d8 <__vector_15>
  20:	f7 c1       	rjmp	.+1006   	; 0x410 <__vector_16>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf e5       	ldi	r28, 0x5F	; 95
  28:	d1 e0       	ldi	r29, 0x01	; 1
  2a:	de bf       	out	0x3e, r29	; 62
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_copy_data>:
  2e:	10 e0       	ldi	r17, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	e6 e4       	ldi	r30, 0x46	; 70
  36:	f5 e0       	ldi	r31, 0x05	; 5
  38:	02 c0       	rjmp	.+4      	; 0x3e <__SP_H__>
  3a:	05 90       	lpm	r0, Z+
  3c:	0d 92       	st	X+, r0
  3e:	aa 37       	cpi	r26, 0x7A	; 122
  40:	b1 07       	cpc	r27, r17
  42:	d9 f7       	brne	.-10     	; 0x3a <__do_copy_data+0xc>

00000044 <__do_clear_bss>:
  44:	20 e0       	ldi	r18, 0x00	; 0
  46:	aa e7       	ldi	r26, 0x7A	; 122
  48:	b0 e0       	ldi	r27, 0x00	; 0
  4a:	01 c0       	rjmp	.+2      	; 0x4e <.do_clear_bss_start>

0000004c <.do_clear_bss_loop>:
  4c:	1d 92       	st	X+, r1

0000004e <.do_clear_bss_start>:
  4e:	ab 3a       	cpi	r26, 0xAB	; 171
  50:	b2 07       	cpc	r27, r18
  52:	e1 f7       	brne	.-8      	; 0x4c <.do_clear_bss_loop>
  54:	15 d1       	rcall	.+554    	; 0x280 <main>
  56:	75 c2       	rjmp	.+1258   	; 0x542 <_exit>

00000058 <__bad_interrupt>:
  58:	d3 cf       	rjmp	.-90     	; 0x0 <__vectors>

0000005a <__vector_6>:
uint16_t nowAMP = 0x1234;

/*************************************************
***************************************************/
ISR(TIM1_COMPA_vect)
{
  5a:	1f 92       	push	r1
  5c:	0f 92       	push	r0
  5e:	0f b6       	in	r0, 0x3f	; 63
  60:	0f 92       	push	r0
  62:	11 24       	eor	r1, r1
  64:	8f 93       	push	r24
	BIT_SET(gWakeUpFlag,_BIT_TIC);
  66:	80 91 a8 00 	lds	r24, 0x00A8
  6a:	81 60       	ori	r24, 0x01	; 1
  6c:	80 93 a8 00 	sts	0x00A8, r24
	wdt_reset();
  70:	a8 95       	wdr
	if(++ticCount >= TIC_FOR_1SEC){
  72:	80 91 a7 00 	lds	r24, 0x00A7
  76:	8f 5f       	subi	r24, 0xFF	; 255
  78:	84 30       	cpi	r24, 0x04	; 4
  7a:	18 f4       	brcc	.+6      	; 0x82 <__vector_6+0x28>
  7c:	80 93 a7 00 	sts	0x00A7, r24
  80:	07 c0       	rjmp	.+14     	; 0x90 <__vector_6+0x36>
		ticCount = 0;
  82:	10 92 a7 00 	sts	0x00A7, r1
		secCount++;
  86:	80 91 a9 00 	lds	r24, 0x00A9
  8a:	8f 5f       	subi	r24, 0xFF	; 255
  8c:	80 93 a9 00 	sts	0x00A9, r24
	}
	//------------------------------
	//PORT_SW = PIN_SW^(1<<_TP);
	//------------------------------
}
  90:	8f 91       	pop	r24
  92:	0f 90       	pop	r0
  94:	0f be       	out	0x3f, r0	; 63
  96:	0f 90       	pop	r0
  98:	1f 90       	pop	r1
  9a:	18 95       	reti

0000009c <set_gWakeUpFlag_i2c>:
/*************************************************
callback function for gWakeUpFlag I2C
***************************************************/
void set_gWakeUpFlag_i2c(void)
{
	BIT_SET(gWakeUpFlag,_BIT_I2C);
  9c:	80 91 a8 00 	lds	r24, 0x00A8
  a0:	82 60       	ori	r24, 0x02	; 2
  a2:	80 93 a8 00 	sts	0x00A8, r24
  a6:	08 95       	ret

000000a8 <call_set_TxBuffer>:

/*************************************************
callback function for build txBufffer
***************************************************/
void call_set_TxBuffer(uint8_t amount)
{
  a8:	af 92       	push	r10
  aa:	bf 92       	push	r11
  ac:	cf 92       	push	r12
  ae:	df 92       	push	r13
  b0:	ef 92       	push	r14
  b2:	ff 92       	push	r15
  b4:	1f 93       	push	r17
  b6:	cf 93       	push	r28
  b8:	df 93       	push	r29
  ba:	c8 2e       	mov	r12, r24
	static uint8_t state = STATE_COMMAND;
	static uint8_t command;
	static uint16_t data_h;


	for(i=0; i < amount; i++)
  bc:	88 23       	and	r24, r24
  be:	09 f4       	brne	.+2      	; 0xc2 <call_set_TxBuffer+0x1a>
  c0:	c2 c0       	rjmp	.+388    	; 0x246 <__stack+0xe7>
  c2:	d1 2c       	mov	r13, r1
			default:
				state = STATE_COMMAND;
			}
		}else if(state == STATE_DATA_1){
			data_h = (uint16_t)data;
			state = STATE_DATA_2;
  c4:	12 e0       	ldi	r17, 0x02	; 2

				state = STATE_COMMAND;
			break;
			case GET_NOWAMP:
				usiTwi_ByteToTxBuffer((uint8_t)((nowAMP>>8)&0x00FF));
				usiTwi_ByteToTxBuffer((uint8_t)(nowAMP&0x00FF));
  c6:	c0 e6       	ldi	r28, 0x60	; 96
  c8:	d0 e0       	ldi	r29, 0x00	; 0
	static uint16_t data_h;


	for(i=0; i < amount; i++)
	{
		data = usiTwi_ByteFromRxBuffer();
  ca:	68 d1       	rcall	.+720    	; 0x39c <usiTwi_ByteFromRxBuffer>
		if(state == STATE_COMMAND){
  cc:	90 91 7d 00 	lds	r25, 0x007D
  d0:	91 11       	cpse	r25, r1
  d2:	6c c0       	rjmp	.+216    	; 0x1ac <__stack+0x4d>
			//usiTwi_flushTxBuffers();
			command = data;
  d4:	80 93 7c 00 	sts	0x007C, r24
			switch(command)
  d8:	82 30       	cpi	r24, 0x02	; 2
  da:	09 f4       	brne	.+2      	; 0xde <call_set_TxBuffer+0x36>
  dc:	4a c0       	rjmp	.+148    	; 0x172 <__stack+0x13>
  de:	28 f4       	brcc	.+10     	; 0xea <call_set_TxBuffer+0x42>
  e0:	88 23       	and	r24, r24
  e2:	59 f0       	breq	.+22     	; 0xfa <call_set_TxBuffer+0x52>
  e4:	81 30       	cpi	r24, 0x01	; 1
  e6:	e9 f1       	breq	.+122    	; 0x162 <__stack+0x3>
  e8:	5e c0       	rjmp	.+188    	; 0x1a6 <__stack+0x47>
  ea:	83 30       	cpi	r24, 0x03	; 3
  ec:	09 f4       	brne	.+2      	; 0xf0 <call_set_TxBuffer+0x48>
  ee:	4f c0       	rjmp	.+158    	; 0x18e <__stack+0x2f>
  f0:	81 51       	subi	r24, 0x11	; 17
  f2:	85 30       	cpi	r24, 0x05	; 5
  f4:	08 f4       	brcc	.+2      	; 0xf8 <call_set_TxBuffer+0x50>
  f6:	53 c0       	rjmp	.+166    	; 0x19e <__stack+0x3f>
  f8:	56 c0       	rjmp	.+172    	; 0x1a6 <__stack+0x47>
			{
			case GET_CONFIG:	
				usiTwi_ByteToTxBuffer((uint8_t)((cfg_Bright[nowMODE]>>8)&0x00FF) );	
  fa:	e0 91 7e 00 	lds	r30, 0x007E
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	ee 0f       	add	r30, r30
 102:	ff 1f       	adc	r31, r31
 104:	ef 58       	subi	r30, 0x8F	; 143
 106:	ff 4f       	sbci	r31, 0xFF	; 255
 108:	81 81       	ldd	r24, Z+1	; 0x01
 10a:	32 d1       	rcall	.+612    	; 0x370 <usiTwi_ByteToTxBuffer>
				usiTwi_ByteToTxBuffer((uint8_t)(cfg_Bright[nowMODE]&0x00FF) );
 10c:	e0 91 7e 00 	lds	r30, 0x007E
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	ee 0f       	add	r30, r30
 114:	ff 1f       	adc	r31, r31
 116:	ef 58       	subi	r30, 0x8F	; 143
 118:	ff 4f       	sbci	r31, 0xFF	; 255
 11a:	80 81       	ld	r24, Z
 11c:	29 d1       	rcall	.+594    	; 0x370 <usiTwi_ByteToTxBuffer>
						
				usiTwi_ByteToTxBuffer((uint8_t)((cfg_Dimm[nowMODE]>>8)&0x00FF) );
 11e:	e0 91 7e 00 	lds	r30, 0x007E
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	ee 0f       	add	r30, r30
 126:	ff 1f       	adc	r31, r31
 128:	e7 59       	subi	r30, 0x97	; 151
 12a:	ff 4f       	sbci	r31, 0xFF	; 255
 12c:	81 81       	ldd	r24, Z+1	; 0x01
 12e:	20 d1       	rcall	.+576    	; 0x370 <usiTwi_ByteToTxBuffer>
				usiTwi_ByteToTxBuffer((uint8_t)(cfg_Dimm[nowMODE]&0x00FF) );
 130:	e0 91 7e 00 	lds	r30, 0x007E
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	ee 0f       	add	r30, r30
 138:	ff 1f       	adc	r31, r31
 13a:	e7 59       	subi	r30, 0x97	; 151
 13c:	ff 4f       	sbci	r31, 0xFF	; 255
 13e:	80 81       	ld	r24, Z
 140:	17 d1       	rcall	.+558    	; 0x370 <usiTwi_ByteToTxBuffer>
												
				usiTwi_ByteToTxBuffer(cfg_TimeUp[nowMODE]);
 142:	e0 91 7e 00 	lds	r30, 0x007E
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	eb 59       	subi	r30, 0x9B	; 155
 14a:	ff 4f       	sbci	r31, 0xFF	; 255
 14c:	80 81       	ld	r24, Z
 14e:	10 d1       	rcall	.+544    	; 0x370 <usiTwi_ByteToTxBuffer>
				usiTwi_ByteToTxBuffer(cfg_TimeDn);
 150:	80 91 64 00 	lds	r24, 0x0064
 154:	0d d1       	rcall	.+538    	; 0x370 <usiTwi_ByteToTxBuffer>
				
				usiTwi_ByteToTxBuffer(cfg_TimeDelay);
 156:	80 91 63 00 	lds	r24, 0x0063
 15a:	0a d1       	rcall	.+532    	; 0x370 <usiTwi_ByteToTxBuffer>

				state = STATE_COMMAND;
 15c:	10 92 7d 00 	sts	0x007D, r1
			break;
 160:	6f c0       	rjmp	.+222    	; 0x240 <__stack+0xe1>
			case GET_NOWAMP:
				usiTwi_ByteToTxBuffer((uint8_t)((nowAMP>>8)&0x00FF));
 162:	80 91 61 00 	lds	r24, 0x0061
 166:	04 d1       	rcall	.+520    	; 0x370 <usiTwi_ByteToTxBuffer>
				usiTwi_ByteToTxBuffer((uint8_t)(nowAMP&0x00FF));
 168:	88 81       	ld	r24, Y
 16a:	02 d1       	rcall	.+516    	; 0x370 <usiTwi_ByteToTxBuffer>
				
				
				state = STATE_COMMAND;
 16c:	10 92 7d 00 	sts	0x007D, r1
			break;
 170:	67 c0       	rjmp	.+206    	; 0x240 <__stack+0xe1>
			case GET_NOWPIR:				
				usiTwi_ByteToTxBuffer(0);
 172:	80 e0       	ldi	r24, 0x00	; 0
 174:	fd d0       	rcall	.+506    	; 0x370 <usiTwi_ByteToTxBuffer>
				if(nowPIR != false){
 176:	80 91 62 00 	lds	r24, 0x0062
 17a:	88 23       	and	r24, r24
 17c:	19 f0       	breq	.+6      	; 0x184 <__stack+0x25>
					usiTwi_ByteToTxBuffer(0x01);
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	f7 d0       	rcall	.+494    	; 0x370 <usiTwi_ByteToTxBuffer>
 182:	02 c0       	rjmp	.+4      	; 0x188 <__stack+0x29>
				}else{
					usiTwi_ByteToTxBuffer(0x00);
 184:	80 e0       	ldi	r24, 0x00	; 0
 186:	f4 d0       	rcall	.+488    	; 0x370 <usiTwi_ByteToTxBuffer>
				}
				
				state = STATE_COMMAND;
 188:	10 92 7d 00 	sts	0x007D, r1
			break;
 18c:	59 c0       	rjmp	.+178    	; 0x240 <__stack+0xe1>
			case GET_NOWMOD:				
				usiTwi_ByteToTxBuffer(0);
 18e:	80 e0       	ldi	r24, 0x00	; 0
 190:	ef d0       	rcall	.+478    	; 0x370 <usiTwi_ByteToTxBuffer>
				usiTwi_ByteToTxBuffer(nowMODE);
 192:	80 91 7e 00 	lds	r24, 0x007E
 196:	ec d0       	rcall	.+472    	; 0x370 <usiTwi_ByteToTxBuffer>
				
				state = STATE_COMMAND;
 198:	10 92 7d 00 	sts	0x007D, r1
			break;
 19c:	51 c0       	rjmp	.+162    	; 0x240 <__stack+0xe1>
			case SET_BRIGHT:
			case SET_DIMM:
			case SET_TIMEUP:
			case SET_TIMEDN:
			case SET_DELAY:
				state = STATE_DATA_1;
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	80 93 7d 00 	sts	0x007D, r24
			break;
 1a4:	4d c0       	rjmp	.+154    	; 0x240 <__stack+0xe1>
			default:
				state = STATE_COMMAND;
 1a6:	10 92 7d 00 	sts	0x007D, r1
 1aa:	4a c0       	rjmp	.+148    	; 0x240 <__stack+0xe1>
			}
		}else if(state == STATE_DATA_1){
 1ac:	91 30       	cpi	r25, 0x01	; 1
 1ae:	49 f4       	brne	.+18     	; 0x1c2 <__stack+0x63>
			data_h = (uint16_t)data;
 1b0:	28 2f       	mov	r18, r24
 1b2:	30 e0       	ldi	r19, 0x00	; 0
 1b4:	30 93 7b 00 	sts	0x007B, r19
 1b8:	20 93 7a 00 	sts	0x007A, r18
			state = STATE_DATA_2;
 1bc:	10 93 7d 00 	sts	0x007D, r17
 1c0:	3f c0       	rjmp	.+126    	; 0x240 <__stack+0xe1>
			
		}else if(state == STATE_DATA_2){
 1c2:	92 30       	cpi	r25, 0x02	; 2
 1c4:	e9 f5       	brne	.+122    	; 0x240 <__stack+0xe1>
			switch(command)
 1c6:	90 91 7c 00 	lds	r25, 0x007C
 1ca:	93 31       	cpi	r25, 0x13	; 19
 1cc:	59 f1       	breq	.+86     	; 0x224 <__stack+0xc5>
 1ce:	28 f4       	brcc	.+10     	; 0x1da <__stack+0x7b>
 1d0:	91 31       	cpi	r25, 0x11	; 17
 1d2:	41 f0       	breq	.+16     	; 0x1e4 <__stack+0x85>
 1d4:	92 31       	cpi	r25, 0x12	; 18
 1d6:	b1 f0       	breq	.+44     	; 0x204 <__stack+0xa5>
 1d8:	31 c0       	rjmp	.+98     	; 0x23c <__stack+0xdd>
 1da:	94 31       	cpi	r25, 0x14	; 20
 1dc:	51 f1       	breq	.+84     	; 0x232 <__stack+0xd3>
 1de:	95 31       	cpi	r25, 0x15	; 21
 1e0:	59 f1       	breq	.+86     	; 0x238 <__stack+0xd9>
 1e2:	2c c0       	rjmp	.+88     	; 0x23c <__stack+0xdd>
			{
			case SET_BRIGHT:
				cfg_Bright[nowMODE] = (data_h<<8)&0xff00;
 1e4:	e0 91 7e 00 	lds	r30, 0x007E
 1e8:	f0 e0       	ldi	r31, 0x00	; 0
				cfg_Bright[nowMODE] |= data;
 1ea:	ee 0f       	add	r30, r30
 1ec:	ff 1f       	adc	r31, r31
 1ee:	ef 58       	subi	r30, 0x8F	; 143
 1f0:	ff 4f       	sbci	r31, 0xFF	; 255
			
		}else if(state == STATE_DATA_2){
			switch(command)
			{
			case SET_BRIGHT:
				cfg_Bright[nowMODE] = (data_h<<8)&0xff00;
 1f2:	b0 90 7a 00 	lds	r11, 0x007A
 1f6:	a1 2c       	mov	r10, r1
				cfg_Bright[nowMODE] |= data;
 1f8:	95 01       	movw	r18, r10
 1fa:	28 2b       	or	r18, r24
 1fc:	c9 01       	movw	r24, r18
 1fe:	91 83       	std	Z+1, r25	; 0x01
 200:	80 83       	st	Z, r24
			break;
 202:	1c c0       	rjmp	.+56     	; 0x23c <__stack+0xdd>
			case SET_DIMM:				
				cfg_Dimm[nowMODE] = (data_h<<8)&0xff00;
 204:	e0 91 7e 00 	lds	r30, 0x007E
 208:	f0 e0       	ldi	r31, 0x00	; 0
				cfg_Dimm[nowMODE] |= data;
 20a:	ee 0f       	add	r30, r30
 20c:	ff 1f       	adc	r31, r31
 20e:	e7 59       	subi	r30, 0x97	; 151
 210:	ff 4f       	sbci	r31, 0xFF	; 255
			case SET_BRIGHT:
				cfg_Bright[nowMODE] = (data_h<<8)&0xff00;
				cfg_Bright[nowMODE] |= data;
			break;
			case SET_DIMM:				
				cfg_Dimm[nowMODE] = (data_h<<8)&0xff00;
 212:	f0 90 7a 00 	lds	r15, 0x007A
 216:	e1 2c       	mov	r14, r1
				cfg_Dimm[nowMODE] |= data;
 218:	97 01       	movw	r18, r14
 21a:	28 2b       	or	r18, r24
 21c:	c9 01       	movw	r24, r18
 21e:	91 83       	std	Z+1, r25	; 0x01
 220:	80 83       	st	Z, r24
			break;
 222:	0c c0       	rjmp	.+24     	; 0x23c <__stack+0xdd>
			case SET_TIMEUP:
				cfg_TimeUp[nowMODE] = data;
 224:	e0 91 7e 00 	lds	r30, 0x007E
 228:	f0 e0       	ldi	r31, 0x00	; 0
 22a:	eb 59       	subi	r30, 0x9B	; 155
 22c:	ff 4f       	sbci	r31, 0xFF	; 255
 22e:	80 83       	st	Z, r24
			break;
 230:	05 c0       	rjmp	.+10     	; 0x23c <__stack+0xdd>
			case SET_TIMEDN:
				cfg_TimeDn = data;
 232:	80 93 64 00 	sts	0x0064, r24
			break;
 236:	02 c0       	rjmp	.+4      	; 0x23c <__stack+0xdd>
			case SET_DELAY:
				cfg_TimeDelay = data;
 238:	80 93 63 00 	sts	0x0063, r24
			break;
			} //end switch
			state = STATE_COMMAND;
 23c:	10 92 7d 00 	sts	0x007D, r1
	static uint8_t state = STATE_COMMAND;
	static uint8_t command;
	static uint16_t data_h;


	for(i=0; i < amount; i++)
 240:	d3 94       	inc	r13
 242:	dc 10       	cpse	r13, r12
 244:	42 cf       	rjmp	.-380    	; 0xca <call_set_TxBuffer+0x22>
			break;
			} //end switch
			state = STATE_COMMAND;
		} //end if
	} //end for
} //
 246:	df 91       	pop	r29
 248:	cf 91       	pop	r28
 24a:	1f 91       	pop	r17
 24c:	ff 90       	pop	r15
 24e:	ef 90       	pop	r14
 250:	df 90       	pop	r13
 252:	cf 90       	pop	r12
 254:	bf 90       	pop	r11
 256:	af 90       	pop	r10
 258:	08 95       	ret

0000025a <debug_init>:

/*************************************************
***************************************************/
void debug_init(void)
{
	PORT_SW &= ~(1<<_TP);	//Pull-up
 25a:	c2 98       	cbi	0x18, 2	; 24
	DDR_SW |= (1<<_TP);		//0=input, 1=output(Save energy)
 25c:	ba 9a       	sbi	0x17, 2	; 23
 25e:	08 95       	ret

00000260 <getSwitch>:
{
	uint8_t retValue = 0;
	//pull up, input
	//MCUCR &= ~(1<<PUD);
	//Add external full up!!
	PORT_SW |= ~((1<<_SW0)|(1<<_SW1));// tri-state(hi-z)
 260:	88 b3       	in	r24, 0x18	; 24
 262:	8c 6f       	ori	r24, 0xFC	; 252
 264:	88 bb       	out	0x18, r24	; 24
	DDR_SW  &= ~((1<<_SW0)|(1<<_SW1));
 266:	87 b3       	in	r24, 0x17	; 23
 268:	8c 7f       	andi	r24, 0xFC	; 252
 26a:	87 bb       	out	0x17, r24	; 23
	
	if(PINB & (1<<_SW0)){ retValue |= 0x01;}
 26c:	86 b3       	in	r24, 0x16	; 22
 26e:	81 70       	andi	r24, 0x01	; 1
	if(PINB & (1<<_SW1)){ retValue |= 0x02;}
 270:	b1 99       	sbic	0x16, 1	; 22
 272:	82 60       	ori	r24, 0x02	; 2
	//if(retValue > 0x03) retValue = 0;	
	if (retValue == 0x03){
 274:	83 30       	cpi	r24, 0x03	; 3
 276:	19 f4       	brne	.+6      	; 0x27e <getSwitch+0x1e>
		cfg_TimeDelay = MY_MINIMUM;	//1.0sec 
 278:	91 e0       	ldi	r25, 0x01	; 1
 27a:	90 93 63 00 	sts	0x0063, r25
	}
	
	return retValue;
}
 27e:	08 95       	ret

00000280 <main>:
int main(void)
{   
	debug_init(); 
 280:	ec df       	rcall	.-40     	; 0x25a <debug_init>
	timer_init(MY_TIC_TIME);
 282:	81 ea       	ldi	r24, 0xA1	; 161
 284:	97 e0       	ldi	r25, 0x07	; 7
 286:	32 d0       	rcall	.+100    	; 0x2ec <timer_init>
	usiTwi_Slave_init(MY_ADDRESS);
 288:	84 e2       	ldi	r24, 0x24	; 36
 28a:	60 d0       	rcall	.+192    	; 0x34c <usiTwi_Slave_init>
	
	set_sleep_mode(SLEEP_MODE_IDLE);
 28c:	85 b7       	in	r24, 0x35	; 53
 28e:	87 7e       	andi	r24, 0xE7	; 231
 290:	85 bf       	out	0x35, r24	; 53
	wdt_enable(WDTO_8S);
 292:	29 e2       	ldi	r18, 0x29	; 41
 294:	88 e1       	ldi	r24, 0x18	; 24
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	0f b6       	in	r0, 0x3f	; 63
 29a:	f8 94       	cli
 29c:	a8 95       	wdr
 29e:	81 bd       	out	0x21, r24	; 33
 2a0:	0f be       	out	0x3f, r0	; 63
 2a2:	21 bd       	out	0x21, r18	; 33
	
	nowMODE = getSwitch();
 2a4:	dd df       	rcall	.-70     	; 0x260 <getSwitch>
 2a6:	80 93 7e 00 	sts	0x007E, r24

	uint16_t targetAMP = cfg_Bright[nowMODE];
	while(1)
    {
		if(BIT_CHECK(gWakeUpFlag,_BIT_I2C))	{
 2aa:	80 91 a8 00 	lds	r24, 0x00A8
 2ae:	81 ff       	sbrs	r24, 1
 2b0:	04 c0       	rjmp	.+8      	; 0x2ba <main+0x3a>
			BIT_CLEAR(gWakeUpFlag,_BIT_I2C);
 2b2:	8d 7f       	andi	r24, 0xFD	; 253
 2b4:	80 93 a8 00 	sts	0x00A8, r24
			usiTwi_is_Stop();
 2b8:	8c d0       	rcall	.+280    	; 0x3d2 <usiTwi_is_Stop>
		}
		if(BIT_CHECK(gWakeUpFlag,_BIT_TIC))	{
 2ba:	80 91 a8 00 	lds	r24, 0x00A8
 2be:	80 ff       	sbrs	r24, 0
 2c0:	03 c0       	rjmp	.+6      	; 0x2c8 <main+0x48>
			BIT_CLEAR(gWakeUpFlag,_BIT_TIC);
 2c2:	8e 7f       	andi	r24, 0xFE	; 254
 2c4:	80 93 a8 00 	sts	0x00A8, r24
			//main work here!
		}
		/* */
		while( !gWakeUpFlag ) {
 2c8:	80 91 a8 00 	lds	r24, 0x00A8
 2cc:	81 11       	cpse	r24, r1
 2ce:	ed cf       	rjmp	.-38     	; 0x2aa <main+0x2a>
			cli();
 2d0:	f8 94       	cli
			sleep_enable();
 2d2:	85 b7       	in	r24, 0x35	; 53
 2d4:	80 62       	ori	r24, 0x20	; 32
 2d6:	85 bf       	out	0x35, r24	; 53
			sei();
 2d8:	78 94       	sei
			sleep_cpu();
 2da:	88 95       	sleep
			sleep_disable();
 2dc:	85 b7       	in	r24, 0x35	; 53
 2de:	8f 7d       	andi	r24, 0xDF	; 223
 2e0:	85 bf       	out	0x35, r24	; 53
		if(BIT_CHECK(gWakeUpFlag,_BIT_TIC))	{
			BIT_CLEAR(gWakeUpFlag,_BIT_TIC);
			//main work here!
		}
		/* */
		while( !gWakeUpFlag ) {
 2e2:	80 91 a8 00 	lds	r24, 0x00A8
 2e6:	88 23       	and	r24, r24
 2e8:	99 f3       	breq	.-26     	; 0x2d0 <main+0x50>
 2ea:	df cf       	rjmp	.-66     	; 0x2aa <main+0x2a>

000002ec <timer_init>:
	OCR1A = 3906; 	0.9998Hz,	1.00019sec
	OCR1A = 7813; 	0.4999Hz,	2.00040sec
	OCR1A = 39060; 	0.1000Hz, 	9.99936sec   
	*/ 
	//but real value here...                                           
	OCR1A = tic_time;	
 2ec:	9b bd       	out	0x2b, r25	; 43
 2ee:	8a bd       	out	0x2a, r24	; 42
	//OCR1A = 1953			//1953=0.25sec
	//OCR1A = 3906;			//3906=0.50sec
	//OCR1A = 7812;			//7812=1.00sec	
	TCNT1  = 0;
 2f0:	1d bc       	out	0x2d, r1	; 45
 2f2:	1c bc       	out	0x2c, r1	; 44
		///Timer1 prescaler = F_clk/1024
		///Timer1 mode = CTC with OCR1A(WGM = 0b0100)
		///No port out	
	TCCR1A = 0;
 2f4:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = 0x0D;
 2f6:	8d e0       	ldi	r24, 0x0D	; 13
 2f8:	8e bd       	out	0x2e, r24	; 46
		///0x0D->Clock On
		///(1<<WGM12)|(1<<CS12)|(1<<CS10)
		///0x08->Clock STOP!
		///(1<<WGM12)
	TCCR1C = 0;	
 2fa:	12 bc       	out	0x22, r1	; 34
	TIMSK1 = (1<<OCIE1A);	// enable timer ISR
 2fc:	82 e0       	ldi	r24, 0x02	; 2
 2fe:	8c b9       	out	0x0c, r24	; 12
 300:	08 95       	ret

00000302 <SET_USI_TO_SEND_ACK>:
********************************************************************************/

void SET_USI_TO_SEND_ACK(void )
{ 
	/* prepare ACK */ 
	USIDR = 0; 
 302:	1f b8       	out	0x0f, r1	; 15
	/* set SDA as output */ 
	DDR_USI |= ( 1 << PORT_USI_SDA ); 
 304:	d6 9a       	sbi	0x1a, 6	; 26
	/* clear all interrupt flags, except Start Cond */ 
	USISR = 
 306:	8e e7       	ldi	r24, 0x7E	; 126
 308:	8e b9       	out	0x0e, r24	; 14
 30a:	08 95       	ret

0000030c <SET_USI_TO_READ_ACK>:
}

void SET_USI_TO_READ_ACK(void )
{ 
	/* set SDA as input */ 
	DDR_USI &= ~( 1 << PORT_USI_SDA ); 
 30c:	d6 98       	cbi	0x1a, 6	; 26
	/* prepare ACK */
	USIDR = 0; 
 30e:	1f b8       	out	0x0f, r1	; 15
	/* clear all interrupt flags, except Start Cond */ 
	USISR = 
 310:	8e e7       	ldi	r24, 0x7E	; 126
 312:	8e b9       	out	0x0e, r24	; 14
 314:	08 95       	ret

00000316 <SET_USI_TO_START_CONDITION_MODE>:
	/* set USI counter to shift 1 bit */ 	
}

void SET_USI_TO_START_CONDITION_MODE(void ) 
{ 
	USICR = 
 316:	88 ea       	ldi	r24, 0xA8	; 168
 318:	8d b9       	out	0x0d, r24	; 13
	/* Shift Register Clock Source = External, positive edge */ 
	/* 4-Bit Counter Source = external, both edges */ 
	( 1 << USICS1 ) | ( 0 << USICS0 ) | ( 0 << USICLK ) | \
	/* no toggle clock-port pin */ 
	( 0 << USITC ); 
	USISR = 
 31a:	80 e7       	ldi	r24, 0x70	; 112
 31c:	8e b9       	out	0x0e, r24	; 14
 31e:	08 95       	ret

00000320 <SET_USI_TO_SEND_DATA>:
}

void SET_USI_TO_SEND_DATA(void ) 
{ 
	/* set SDA as output */ 
	DDR_USI |=  ( 1 << PORT_USI_SDA ); 
 320:	d6 9a       	sbi	0x1a, 6	; 26
	/* clear all interrupt flags, except Start Cond */ 
	USISR    =  
 322:	80 e7       	ldi	r24, 0x70	; 112
 324:	8e b9       	out	0x0e, r24	; 14
 326:	08 95       	ret

00000328 <SET_USI_TO_READ_DATA>:
}

void SET_USI_TO_READ_DATA(void ) 
{ 
	/* set SDA as input */ 
	DDR_USI &= ~( 1 << PORT_USI_SDA ); 
 328:	d6 98       	cbi	0x1a, 6	; 26
	/* clear all interrupt flags, except Start Cond */
	USISR    = 
 32a:	80 e7       	ldi	r24, 0x70	; 112
 32c:	8e b9       	out	0x0e, r24	; 14
 32e:	08 95       	ret

00000330 <usiTwi_flushTxBuffers>:
/********************************************************************************
********************************************************************************/
// flushes the TWI buffers
void usiTwi_flushTxBuffers(void)
{
   txTail = 0;  txHead = 0;  txCount = 0;
 330:	10 92 80 00 	sts	0x0080, r1
 334:	10 92 81 00 	sts	0x0081, r1
 338:	10 92 7f 00 	sts	0x007F, r1
 33c:	08 95       	ret

0000033e <usiTwi_flushRxBuffers>:
}

void usiTwi_flushRxBuffers(void)
{
	rxTail = 0;  rxHead = 0;  rxCount = 0;
 33e:	10 92 93 00 	sts	0x0093, r1
 342:	10 92 94 00 	sts	0x0094, r1
 346:	10 92 92 00 	sts	0x0092, r1
 34a:	08 95       	ret

0000034c <usiTwi_Slave_init>:
                                public functions
********************************************************************************/
// initialize USI for TWI slave mode

void usiTwi_Slave_init(uint8_t ownAddress)
{
 34c:	cf 93       	push	r28
 34e:	c8 2f       	mov	r28, r24
  usiTwi_flushTxBuffers();
 350:	ef df       	rcall	.-34     	; 0x330 <usiTwi_flushTxBuffers>
  usiTwi_flushRxBuffers();
 352:	f5 df       	rcall	.-22     	; 0x33e <usiTwi_flushRxBuffers>

  slaveAddress = ownAddress;
 354:	c0 93 a5 00 	sts	0x00A5, r28
  // low when a start condition is detected or a counter overflow (only
  // for USIWM1, USIWM0 = 11).  This inserts a wait state.  SCL is released
  // by the ISRs (USI_START_vect and USI_OVERFLOW_vect).

  //1. Set SCL and SDA as output
  DDR_USI |= ( 1 << PORT_USI_SCL ) | ( 1 << PORT_USI_SDA );
 358:	8a b3       	in	r24, 0x1a	; 26
 35a:	80 65       	ori	r24, 0x50	; 80
 35c:	8a bb       	out	0x1a, r24	; 26
  //2. set SCL high
  PORT_USI |= ( 1 << PORT_USI_SCL );
 35e:	dc 9a       	sbi	0x1b, 4	; 27
  //3. set SDA high
  PORT_USI |= ( 1 << PORT_USI_SDA );
 360:	de 9a       	sbi	0x1b, 6	; 27

  //4. Set SDA as input
  DDR_USI &= ~( 1 << PORT_USI_SDA );
 362:	d6 98       	cbi	0x1a, 6	; 26
  //5. Set registers
  USICR =
 364:	88 ea       	ldi	r24, 0xA8	; 168
 366:	8d b9       	out	0x0d, r24	; 13
       ( 1 << USICS1 ) | ( 0 << USICS0 ) | ( 0 << USICLK ) |
       // no toggle clock-port pin
       ( 0 << USITC );

  // clear all interrupt flags and reset overflow counter(USICNT3:0)
  USISR = ( 1 << USISIF ) | ( 1 << USIOIF ) | ( 1 << USIPF ) | ( 1 << USIDC ) | ( 0x0 << USICNT0);
 368:	80 ef       	ldi	r24, 0xF0	; 240
 36a:	8e b9       	out	0x0e, r24	; 14

}
 36c:	cf 91       	pop	r28
 36e:	08 95       	ret

00000370 <usiTwi_ByteToTxBuffer>:

// put data(a byte) in the transmission buffer, wait if buffer is full
void usiTwi_ByteToTxBuffer(uint8_t tx_data)
{
	//wait for free space in buffer
	while ( txCount == TWI_TX_BUFFER_SIZE) ;
 370:	90 91 7f 00 	lds	r25, 0x007F
 374:	90 31       	cpi	r25, 0x10	; 16
 376:	e1 f3       	breq	.-8      	; 0x370 <usiTwi_ByteToTxBuffer>

	// store data in buffer
	txBuf[ txHead ] = tx_data;
 378:	e0 91 81 00 	lds	r30, 0x0081
 37c:	f0 e0       	ldi	r31, 0x00	; 0
 37e:	ee 57       	subi	r30, 0x7E	; 126
 380:	ff 4f       	sbci	r31, 0xFF	; 255
 382:	80 83       	st	Z, r24
	txHead = ( txHead + 1 ) & TWI_TX_BUFFER_MASK;
 384:	80 91 81 00 	lds	r24, 0x0081
 388:	8f 5f       	subi	r24, 0xFF	; 255
 38a:	8f 70       	andi	r24, 0x0F	; 15
 38c:	80 93 81 00 	sts	0x0081, r24
	txCount++;
 390:	80 91 7f 00 	lds	r24, 0x007F
 394:	8f 5f       	subi	r24, 0xFF	; 255
 396:	80 93 7f 00 	sts	0x007F, r24
 39a:	08 95       	ret

0000039c <usiTwi_ByteFromRxBuffer>:
// return a byte from the receive buffer, wait if buffer is empty
uint8_t usiTwi_ByteFromRxBuffer(void)
{
	uint8_t rx_data;
	// wait for Rx data
	while ( !rxCount );
 39c:	80 91 92 00 	lds	r24, 0x0092
 3a0:	88 23       	and	r24, r24
 3a2:	e1 f3       	breq	.-8      	; 0x39c <usiTwi_ByteFromRxBuffer>

	rx_data = rxBuf [ rxTail ];
 3a4:	e0 91 93 00 	lds	r30, 0x0093
 3a8:	f0 e0       	ldi	r31, 0x00	; 0
 3aa:	eb 56       	subi	r30, 0x6B	; 107
 3ac:	ff 4f       	sbci	r31, 0xFF	; 255
 3ae:	80 81       	ld	r24, Z
	rxTail = ( rxTail + 1 ) & TWI_RX_BUFFER_MASK;
 3b0:	90 91 93 00 	lds	r25, 0x0093
 3b4:	9f 5f       	subi	r25, 0xFF	; 255
 3b6:	9f 70       	andi	r25, 0x0F	; 15
 3b8:	90 93 93 00 	sts	0x0093, r25
	rxCount--;
 3bc:	90 91 92 00 	lds	r25, 0x0092
 3c0:	91 50       	subi	r25, 0x01	; 1
 3c2:	90 93 92 00 	sts	0x0092, r25

	return rx_data;
}
 3c6:	08 95       	ret

000003c8 <usiTwi_Set_TxBuffer>:
{
	return txCount;
}
uint8_t usiTwi_is_DataInRxBuffer(void)
{
	return rxCount;
 3c8:	80 91 92 00 	lds	r24, 0x0092
/********************************************************************************
********************************************************************************/
void usiTwi_Set_TxBuffer(void)
{
	uint8_t amount = usiTwi_is_DataInRxBuffer();
	if(amount == 0){	return; }			//No data in buffer
 3cc:	81 11       	cpse	r24, r1

	call_set_TxBuffer(amount);
 3ce:	6c de       	rcall	.-808    	; 0xa8 <call_set_TxBuffer>
 3d0:	08 95       	ret

000003d2 <usiTwi_is_Stop>:


void usiTwi_is_Stop(void)
{
	//if(!usi_onReceiverPtr()){ return; }	//No receive callback, Nothing to do
	if(!(USISR & (1<<USIPF))){	return; }	//Stop not detected
 3d2:	75 99       	sbic	0x0e, 5	; 14

	usiTwi_Set_TxBuffer();
 3d4:	f9 df       	rcall	.-14     	; 0x3c8 <usiTwi_Set_TxBuffer>
 3d6:	08 95       	ret

000003d8 <__vector_15>:
/********************************************************************************
                            USI Start Condition ISR
********************************************************************************/

ISR( USI_START_VECTOR )
{
 3d8:	1f 92       	push	r1
 3da:	0f 92       	push	r0
 3dc:	0f b6       	in	r0, 0x3f	; 63
 3de:	0f 92       	push	r0
 3e0:	11 24       	eor	r1, r1
 3e2:	8f 93       	push	r24
  // This triggers on second write, but claims to the callback there is only *one* byte in buffer
  USI_RECEIVE_CALLBACK();
  */

  // set default starting conditions for new TWI package
  overflowState = USI_SLAVE_CHECK_ADDRESS;
 3e4:	10 92 a6 00 	sts	0x00A6, r1

  //1. set SDA as input
  DDR_USI &= ~( 1 << PORT_USI_SDA );
 3e8:	d6 98       	cbi	0x1a, 6	; 26
  // start detector will hold SCL low ) - if a Stop Condition arises then leave
  // the interrupt to prevent waiting forever - don't use USISR to test for Stop
  // Condition as in Application Note AVR312 because the Stop Condition Flag is
  // going to be set from the last TWI sequence  
       // SCL his high .........................// and SDA is low
  while (( PIN_USI & ( 1 << PIN_USI_SCL ) ) && !( ( PIN_USI & ( 1 << PIN_USI_SDA ) ) ) );
 3ea:	cc 9b       	sbis	0x19, 4	; 25
 3ec:	02 c0       	rjmp	.+4      	; 0x3f2 <__vector_15+0x1a>
 3ee:	ce 9b       	sbis	0x19, 6	; 25
 3f0:	fc cf       	rjmp	.-8      	; 0x3ea <__vector_15+0x12>
	// 	sda = low	scl = high		loop
	//	sda = high	scl = low		break	stop condition
	//	sda = high	scl = high		break	stop condition
	
	
  if ( !( PIN_USI & ( 1 << PIN_USI_SDA ) ) ) {    // a Stop Condition did NOT occur
 3f2:	ce 99       	sbic	0x19, 6	; 25
 3f4:	03 c0       	rjmp	.+6      	; 0x3fc <__vector_15+0x24>
    USICR =
 3f6:	88 ef       	ldi	r24, 0xF8	; 248
 3f8:	8d b9       	out	0x0d, r24	; 13
 3fa:	02 c0       	rjmp	.+4      	; 0x400 <__vector_15+0x28>
         ( 1 << USICS1 ) | ( 0 << USICS0 ) | ( 0 << USICLK ) |
         // no toggle clock-port pin
         ( 0 << USITC );

  }  else  {									// a Stop Condition did occur
    USICR =
 3fc:	88 ea       	ldi	r24, 0xA8	; 168
 3fe:	8d b9       	out	0x0d, r24	; 13
         // no toggle clock-port pin
         ( 0 << USITC );

  } // end if

  USISR =
 400:	80 ef       	ldi	r24, 0xF0	; 240
 402:	8e b9       	out	0x0e, r24	; 14
       // clear interrupt flags - resetting the Start Condition Flag will release SCL
	   // set USI to sample 8 bits (count 16 external SCL pin toggles)
       ( 1 << USISIF ) | ( 1 << USIOIF ) | ( 1 << USIPF ) |( 1 << USIDC ) | ( 0x0 << USICNT0);


} // end ISR( USI_START_VECTOR )
 404:	8f 91       	pop	r24
 406:	0f 90       	pop	r0
 408:	0f be       	out	0x3f, r0	; 63
 40a:	0f 90       	pop	r0
 40c:	1f 90       	pop	r1
 40e:	18 95       	reti

00000410 <__vector_16>:
Handles all the communication.
Only disabled when waiting for a new Start Condition.
********************************************************************************/

ISR( USI_OVERFLOW_VECTOR )
{
 410:	1f 92       	push	r1
 412:	0f 92       	push	r0
 414:	0f b6       	in	r0, 0x3f	; 63
 416:	0f 92       	push	r0
 418:	11 24       	eor	r1, r1
 41a:	2f 93       	push	r18
 41c:	3f 93       	push	r19
 41e:	4f 93       	push	r20
 420:	5f 93       	push	r21
 422:	6f 93       	push	r22
 424:	7f 93       	push	r23
 426:	8f 93       	push	r24
 428:	9f 93       	push	r25
 42a:	af 93       	push	r26
 42c:	bf 93       	push	r27
 42e:	ef 93       	push	r30
 430:	ff 93       	push	r31
  switch ( overflowState )
 432:	80 91 a6 00 	lds	r24, 0x00A6
 436:	82 30       	cpi	r24, 0x02	; 2
 438:	09 f4       	brne	.+2      	; 0x43c <__vector_16+0x2c>
 43a:	4d c0       	rjmp	.+154    	; 0x4d6 <__vector_16+0xc6>
 43c:	28 f4       	brcc	.+10     	; 0x448 <__vector_16+0x38>
 43e:	88 23       	and	r24, r24
 440:	59 f0       	breq	.+22     	; 0x458 <__vector_16+0x48>
 442:	81 30       	cpi	r24, 0x01	; 1
 444:	51 f1       	breq	.+84     	; 0x49a <__vector_16+0x8a>
 446:	6b c0       	rjmp	.+214    	; 0x51e <__vector_16+0x10e>
 448:	84 30       	cpi	r24, 0x04	; 4
 44a:	09 f4       	brne	.+2      	; 0x44e <__vector_16+0x3e>
 44c:	49 c0       	rjmp	.+146    	; 0x4e0 <__vector_16+0xd0>
 44e:	00 f1       	brcs	.+64     	; 0x490 <__vector_16+0x80>
 450:	85 30       	cpi	r24, 0x05	; 5
 452:	09 f4       	brne	.+2      	; 0x456 <__vector_16+0x46>
 454:	4a c0       	rjmp	.+148    	; 0x4ea <__vector_16+0xda>
 456:	63 c0       	rjmp	.+198    	; 0x51e <__vector_16+0x10e>
  {
	// -----------------------------------------------------------------------------
    // Address mode: check address and send ACK (and next USI_SLAVE_SEND_DATA) if OK,
    // else reset USI
    case USI_SLAVE_CHECK_ADDRESS:
      if ( ( USIDR == 0 ) || ( ( USIDR >> 1 ) == slaveAddress) )
 458:	8f b1       	in	r24, 0x0f	; 15
 45a:	88 23       	and	r24, r24
 45c:	31 f0       	breq	.+12     	; 0x46a <__vector_16+0x5a>
 45e:	9f b1       	in	r25, 0x0f	; 15
 460:	96 95       	lsr	r25
 462:	80 91 a5 00 	lds	r24, 0x00A5
 466:	98 13       	cpse	r25, r24
 468:	11 c0       	rjmp	.+34     	; 0x48c <__vector_16+0x7c>
      {
        //??? Note: USICR must be set to 14(0x1110) before releasing SCL
		if ( USIDR & 0x01 )	//----------------->1=[Master read] 
 46a:	78 9b       	sbis	0x0f, 0	; 15
 46c:	09 c0       	rjmp	.+18     	; 0x480 <__vector_16+0x70>

}

uint8_t usiTwi_is_DataInTxBuffer(void)
{
	return txCount;
 46e:	80 91 7f 00 	lds	r24, 0x007F
      {
        //??? Note: USICR must be set to 14(0x1110) before releasing SCL
		if ( USIDR & 0x01 )	//----------------->1=[Master read] 
        {
          ///////////////////////////////////////
		  if( ! usiTwi_is_DataInTxBuffer() ){  usiTwi_Set_TxBuffer();  }			  	  
 472:	81 11       	cpse	r24, r1
 474:	01 c0       	rjmp	.+2      	; 0x478 <__vector_16+0x68>
 476:	a8 df       	rcall	.-176    	; 0x3c8 <usiTwi_Set_TxBuffer>
		  //////////////////////////////////////
          overflowState = USI_SLAVE_SEND_DATA; //Wait for send data~
 478:	81 e0       	ldi	r24, 0x01	; 1
 47a:	80 93 a6 00 	sts	0x00A6, r24
 47e:	04 c0       	rjmp	.+8      	; 0x488 <__vector_16+0x78>
		  
        } else {	//-------------------------> 0=[Master write] 
          //////////////////////////////////////
		  usiTwi_flushRxBuffers();
 480:	5e df       	rcall	.-324    	; 0x33e <usiTwi_flushRxBuffers>
		  //////////////////////////////////////
		  overflowState = USI_SLAVE_REQUEST_DATA;
 482:	84 e0       	ldi	r24, 0x04	; 4
 484:	80 93 a6 00 	sts	0x00A6, r24
		  
        }
        SET_USI_TO_SEND_ACK( ); //shift 1 bit
 488:	3c df       	rcall	.-392    	; 0x302 <SET_USI_TO_SEND_ACK>
 48a:	49 c0       	rjmp	.+146    	; 0x51e <__vector_16+0x10e>
		
      } else {
        SET_USI_TO_START_CONDITION_MODE( );
 48c:	44 df       	rcall	.-376    	; 0x316 <SET_USI_TO_START_CONDITION_MODE>
 48e:	47 c0       	rjmp	.+142    	; 0x51e <__vector_16+0x10e>
	// -----------------------------------------------------------------------------	  
	// -----------------------------------------------------------------------------
    // Master write data mode: check reply and goto USI_SLAVE_SEND_DATA if OK,
    // else reset USI
    case USI_SLAVE_CHECK_REPLY_SEND_DATA:
      if ( USIDR ){
 490:	8f b1       	in	r24, 0x0f	; 15
 492:	88 23       	and	r24, r24
 494:	11 f0       	breq	.+4      	; 0x49a <__vector_16+0x8a>
        // if NACK, the master does not want more data
        SET_USI_TO_START_CONDITION_MODE( );
 496:	3f df       	rcall	.-386    	; 0x316 <SET_USI_TO_START_CONDITION_MODE>
        return;
 498:	43 c0       	rjmp	.+134    	; 0x520 <__vector_16+0x110>
	// -----------------------------------------------------------------------------
    // copy data from buffer to USIDR and set USI to shift byte
    // next USI_SLAVE_REQUEST_REPLY_FROM_SEND_DATA
    case USI_SLAVE_SEND_DATA:		/* #1 */
      // Get data from Buffer
      if ( txCount )
 49a:	80 91 7f 00 	lds	r24, 0x007F
 49e:	88 23       	and	r24, r24
 4a0:	b9 f0       	breq	.+46     	; 0x4d0 <__vector_16+0xc0>
      {
        USIDR = txBuf[ txTail ];
 4a2:	e0 91 80 00 	lds	r30, 0x0080
 4a6:	f0 e0       	ldi	r31, 0x00	; 0
 4a8:	ee 57       	subi	r30, 0x7E	; 126
 4aa:	ff 4f       	sbci	r31, 0xFF	; 255
 4ac:	80 81       	ld	r24, Z
 4ae:	8f b9       	out	0x0f, r24	; 15
        txTail = ( txTail + 1 ) & TWI_TX_BUFFER_MASK;
 4b0:	80 91 80 00 	lds	r24, 0x0080
 4b4:	8f 5f       	subi	r24, 0xFF	; 255
 4b6:	8f 70       	andi	r24, 0x0F	; 15
 4b8:	80 93 80 00 	sts	0x0080, r24
        txCount--;
 4bc:	80 91 7f 00 	lds	r24, 0x007F
 4c0:	81 50       	subi	r24, 0x01	; 1
 4c2:	80 93 7f 00 	sts	0x007F, r24
        // the buffer is empty
        SET_USI_TO_READ_ACK( ); // This might be neccessary sometimes see http://www.avrfreaks.net/index.php?name=PNphpBB2&file=viewtopic&p=805227#805227
        SET_USI_TO_START_CONDITION_MODE( );
        return;
      } // end if
      overflowState = USI_SLAVE_1ST_CHECK_REPLY_SEND_DATA;
 4c6:	82 e0       	ldi	r24, 0x02	; 2
 4c8:	80 93 a6 00 	sts	0x00A6, r24
      SET_USI_TO_SEND_DATA( );
 4cc:	29 df       	rcall	.-430    	; 0x320 <SET_USI_TO_SEND_DATA>
      break;
 4ce:	27 c0       	rjmp	.+78     	; 0x51e <__vector_16+0x10e>
        USIDR = txBuf[ txTail ];
        txTail = ( txTail + 1 ) & TWI_TX_BUFFER_MASK;
        txCount--;
      } else {
        // the buffer is empty
        SET_USI_TO_READ_ACK( ); // This might be neccessary sometimes see http://www.avrfreaks.net/index.php?name=PNphpBB2&file=viewtopic&p=805227#805227
 4d0:	1d df       	rcall	.-454    	; 0x30c <SET_USI_TO_READ_ACK>
        SET_USI_TO_START_CONDITION_MODE( );
 4d2:	21 df       	rcall	.-446    	; 0x316 <SET_USI_TO_START_CONDITION_MODE>
        return;
 4d4:	25 c0       	rjmp	.+74     	; 0x520 <__vector_16+0x110>
	  
	// -----------------------------------------------------------------------------
    // set USI to sample reply from master
    // next USI_SLAVE_CHECK_REPLY_FROM_SEND_DATA
    case USI_SLAVE_1ST_CHECK_REPLY_SEND_DATA:
      overflowState = USI_SLAVE_CHECK_REPLY_SEND_DATA;
 4d6:	83 e0       	ldi	r24, 0x03	; 3
 4d8:	80 93 a6 00 	sts	0x00A6, r24
      SET_USI_TO_READ_ACK( );
 4dc:	17 df       	rcall	.-466    	; 0x30c <SET_USI_TO_READ_ACK>
      break;
 4de:	1f c0       	rjmp	.+62     	; 0x51e <__vector_16+0x10e>
	// -----------------------------------------------------------------------------
	// -----------------------------------------------------------------------------
    // Master read data mode: set USI to sample data from master, next
    // USI_SLAVE_GET_DATA_AND_SEND_ACK
    case USI_SLAVE_REQUEST_DATA:
      overflowState = USI_SLAVE_GET_DATA_AND_SEND_ACK;
 4e0:	85 e0       	ldi	r24, 0x05	; 5
 4e2:	80 93 a6 00 	sts	0x00A6, r24
      SET_USI_TO_READ_DATA( );
 4e6:	20 df       	rcall	.-448    	; 0x328 <SET_USI_TO_READ_DATA>
      break;
 4e8:	1a c0       	rjmp	.+52     	; 0x51e <__vector_16+0x10e>
    // copy data from USIDR and send ACK
    // next USI_SLAVE_REQUEST_DATA
    case USI_SLAVE_GET_DATA_AND_SEND_ACK:
      // put data into buffer
      // check buffer size
      if ( rxCount < TWI_RX_BUFFER_SIZE )
 4ea:	80 91 92 00 	lds	r24, 0x0092
 4ee:	80 31       	cpi	r24, 0x10	; 16
 4f0:	90 f4       	brcc	.+36     	; 0x516 <__vector_16+0x106>
      {
        rxBuf[ rxHead ] = USIDR;
 4f2:	e0 91 94 00 	lds	r30, 0x0094
 4f6:	8f b1       	in	r24, 0x0f	; 15
 4f8:	f0 e0       	ldi	r31, 0x00	; 0
 4fa:	eb 56       	subi	r30, 0x6B	; 107
 4fc:	ff 4f       	sbci	r31, 0xFF	; 255
 4fe:	80 83       	st	Z, r24
        rxHead = ( rxHead + 1 ) & TWI_RX_BUFFER_MASK;
 500:	80 91 94 00 	lds	r24, 0x0094
 504:	8f 5f       	subi	r24, 0xFF	; 255
 506:	8f 70       	andi	r24, 0x0F	; 15
 508:	80 93 94 00 	sts	0x0094, r24
        rxCount++;
 50c:	80 91 92 00 	lds	r24, 0x0092
 510:	8f 5f       	subi	r24, 0xFF	; 255
 512:	80 93 92 00 	sts	0x0092, r24
      } else {
        // overrun
        // drop data
      }
      // next USI_SLAVE_REQUEST_DATA
      overflowState = USI_SLAVE_REQUEST_DATA;
 516:	84 e0       	ldi	r24, 0x04	; 4
 518:	80 93 a6 00 	sts	0x00A6, r24
      SET_USI_TO_SEND_ACK( );
 51c:	f2 de       	rcall	.-540    	; 0x302 <SET_USI_TO_SEND_ACK>
      break;

  } // end switch
	set_gWakeUpFlag_i2c();
 51e:	be dd       	rcall	.-1156   	; 0x9c <set_gWakeUpFlag_i2c>

 520:	ff 91       	pop	r31
 522:	ef 91       	pop	r30
 524:	bf 91       	pop	r27
 526:	af 91       	pop	r26
 528:	9f 91       	pop	r25
 52a:	8f 91       	pop	r24
 52c:	7f 91       	pop	r23
 52e:	6f 91       	pop	r22
 530:	5f 91       	pop	r21
 532:	4f 91       	pop	r20
 534:	3f 91       	pop	r19
 536:	2f 91       	pop	r18
 538:	0f 90       	pop	r0
 53a:	0f be       	out	0x3f, r0	; 63
 53c:	0f 90       	pop	r0
 53e:	1f 90       	pop	r1
 540:	18 95       	reti

00000542 <_exit>:
 542:	f8 94       	cli

00000544 <__stop_program>:
 544:	ff cf       	rjmp	.-2      	; 0x544 <__stop_program>
